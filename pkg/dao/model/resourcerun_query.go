// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/environment"
	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/project"
	"github.com/seal-io/walrus/pkg/dao/model/resource"
	"github.com/seal-io/walrus/pkg/dao/model/resourcerun"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// ResourceRunQuery is the builder for querying ResourceRun entities.
type ResourceRunQuery struct {
	config
	ctx             *QueryContext
	order           []resourcerun.OrderOption
	inters          []Interceptor
	predicates      []predicate.ResourceRun
	withProject     *ProjectQuery
	withEnvironment *EnvironmentQuery
	withResource    *ResourceQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ResourceRunQuery builder.
func (rrq *ResourceRunQuery) Where(ps ...predicate.ResourceRun) *ResourceRunQuery {
	rrq.predicates = append(rrq.predicates, ps...)
	return rrq
}

// Limit the number of records to be returned by this query.
func (rrq *ResourceRunQuery) Limit(limit int) *ResourceRunQuery {
	rrq.ctx.Limit = &limit
	return rrq
}

// Offset to start from.
func (rrq *ResourceRunQuery) Offset(offset int) *ResourceRunQuery {
	rrq.ctx.Offset = &offset
	return rrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rrq *ResourceRunQuery) Unique(unique bool) *ResourceRunQuery {
	rrq.ctx.Unique = &unique
	return rrq
}

// Order specifies how the records should be ordered.
func (rrq *ResourceRunQuery) Order(o ...resourcerun.OrderOption) *ResourceRunQuery {
	rrq.order = append(rrq.order, o...)
	return rrq
}

// QueryProject chains the current query on the "project" edge.
func (rrq *ResourceRunQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: rrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcerun.Table, resourcerun.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcerun.ProjectTable, resourcerun.ProjectColumn),
		)
		schemaConfig := rrq.schemaConfig
		step.To.Schema = schemaConfig.Project
		step.Edge.Schema = schemaConfig.ResourceRun
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironment chains the current query on the "environment" edge.
func (rrq *ResourceRunQuery) QueryEnvironment() *EnvironmentQuery {
	query := (&EnvironmentClient{config: rrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcerun.Table, resourcerun.FieldID, selector),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcerun.EnvironmentTable, resourcerun.EnvironmentColumn),
		)
		schemaConfig := rrq.schemaConfig
		step.To.Schema = schemaConfig.Environment
		step.Edge.Schema = schemaConfig.ResourceRun
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResource chains the current query on the "resource" edge.
func (rrq *ResourceRunQuery) QueryResource() *ResourceQuery {
	query := (&ResourceClient{config: rrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(resourcerun.Table, resourcerun.FieldID, selector),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, resourcerun.ResourceTable, resourcerun.ResourceColumn),
		)
		schemaConfig := rrq.schemaConfig
		step.To.Schema = schemaConfig.Resource
		step.Edge.Schema = schemaConfig.ResourceRun
		fromU = sqlgraph.SetNeighbors(rrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ResourceRun entity from the query.
// Returns a *NotFoundError when no ResourceRun was found.
func (rrq *ResourceRunQuery) First(ctx context.Context) (*ResourceRun, error) {
	nodes, err := rrq.Limit(1).All(setContextOp(ctx, rrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{resourcerun.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rrq *ResourceRunQuery) FirstX(ctx context.Context) *ResourceRun {
	node, err := rrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ResourceRun ID from the query.
// Returns a *NotFoundError when no ResourceRun ID was found.
func (rrq *ResourceRunQuery) FirstID(ctx context.Context) (id object.ID, err error) {
	var ids []object.ID
	if ids, err = rrq.Limit(1).IDs(setContextOp(ctx, rrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{resourcerun.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rrq *ResourceRunQuery) FirstIDX(ctx context.Context) object.ID {
	id, err := rrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ResourceRun entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ResourceRun entity is found.
// Returns a *NotFoundError when no ResourceRun entities are found.
func (rrq *ResourceRunQuery) Only(ctx context.Context) (*ResourceRun, error) {
	nodes, err := rrq.Limit(2).All(setContextOp(ctx, rrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{resourcerun.Label}
	default:
		return nil, &NotSingularError{resourcerun.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rrq *ResourceRunQuery) OnlyX(ctx context.Context) *ResourceRun {
	node, err := rrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ResourceRun ID in the query.
// Returns a *NotSingularError when more than one ResourceRun ID is found.
// Returns a *NotFoundError when no entities are found.
func (rrq *ResourceRunQuery) OnlyID(ctx context.Context) (id object.ID, err error) {
	var ids []object.ID
	if ids, err = rrq.Limit(2).IDs(setContextOp(ctx, rrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{resourcerun.Label}
	default:
		err = &NotSingularError{resourcerun.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rrq *ResourceRunQuery) OnlyIDX(ctx context.Context) object.ID {
	id, err := rrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ResourceRuns.
func (rrq *ResourceRunQuery) All(ctx context.Context) ([]*ResourceRun, error) {
	ctx = setContextOp(ctx, rrq.ctx, "All")
	if err := rrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ResourceRun, *ResourceRunQuery]()
	return withInterceptors[[]*ResourceRun](ctx, rrq, qr, rrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rrq *ResourceRunQuery) AllX(ctx context.Context) []*ResourceRun {
	nodes, err := rrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ResourceRun IDs.
func (rrq *ResourceRunQuery) IDs(ctx context.Context) (ids []object.ID, err error) {
	if rrq.ctx.Unique == nil && rrq.path != nil {
		rrq.Unique(true)
	}
	ctx = setContextOp(ctx, rrq.ctx, "IDs")
	if err = rrq.Select(resourcerun.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rrq *ResourceRunQuery) IDsX(ctx context.Context) []object.ID {
	ids, err := rrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rrq *ResourceRunQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rrq.ctx, "Count")
	if err := rrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rrq, querierCount[*ResourceRunQuery](), rrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rrq *ResourceRunQuery) CountX(ctx context.Context) int {
	count, err := rrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rrq *ResourceRunQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rrq.ctx, "Exist")
	switch _, err := rrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("model: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rrq *ResourceRunQuery) ExistX(ctx context.Context) bool {
	exist, err := rrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ResourceRunQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rrq *ResourceRunQuery) Clone() *ResourceRunQuery {
	if rrq == nil {
		return nil
	}
	return &ResourceRunQuery{
		config:          rrq.config,
		ctx:             rrq.ctx.Clone(),
		order:           append([]resourcerun.OrderOption{}, rrq.order...),
		inters:          append([]Interceptor{}, rrq.inters...),
		predicates:      append([]predicate.ResourceRun{}, rrq.predicates...),
		withProject:     rrq.withProject.Clone(),
		withEnvironment: rrq.withEnvironment.Clone(),
		withResource:    rrq.withResource.Clone(),
		// clone intermediate query.
		sql:  rrq.sql.Clone(),
		path: rrq.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (rrq *ResourceRunQuery) WithProject(opts ...func(*ProjectQuery)) *ResourceRunQuery {
	query := (&ProjectClient{config: rrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rrq.withProject = query
	return rrq
}

// WithEnvironment tells the query-builder to eager-load the nodes that are connected to
// the "environment" edge. The optional arguments are used to configure the query builder of the edge.
func (rrq *ResourceRunQuery) WithEnvironment(opts ...func(*EnvironmentQuery)) *ResourceRunQuery {
	query := (&EnvironmentClient{config: rrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rrq.withEnvironment = query
	return rrq
}

// WithResource tells the query-builder to eager-load the nodes that are connected to
// the "resource" edge. The optional arguments are used to configure the query builder of the edge.
func (rrq *ResourceRunQuery) WithResource(opts ...func(*ResourceQuery)) *ResourceRunQuery {
	query := (&ResourceClient{config: rrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rrq.withResource = query
	return rrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ResourceRun.Query().
//		GroupBy(resourcerun.FieldCreateTime).
//		Aggregate(model.Count()).
//		Scan(ctx, &v)
func (rrq *ResourceRunQuery) GroupBy(field string, fields ...string) *ResourceRunGroupBy {
	rrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ResourceRunGroupBy{build: rrq}
	grbuild.flds = &rrq.ctx.Fields
	grbuild.label = resourcerun.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ResourceRun.Query().
//		Select(resourcerun.FieldCreateTime).
//		Scan(ctx, &v)
func (rrq *ResourceRunQuery) Select(fields ...string) *ResourceRunSelect {
	rrq.ctx.Fields = append(rrq.ctx.Fields, fields...)
	sbuild := &ResourceRunSelect{ResourceRunQuery: rrq}
	sbuild.label = resourcerun.Label
	sbuild.flds, sbuild.scan = &rrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ResourceRunSelect configured with the given aggregations.
func (rrq *ResourceRunQuery) Aggregate(fns ...AggregateFunc) *ResourceRunSelect {
	return rrq.Select().Aggregate(fns...)
}

func (rrq *ResourceRunQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rrq.inters {
		if inter == nil {
			return fmt.Errorf("model: uninitialized interceptor (forgotten import model/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rrq); err != nil {
				return err
			}
		}
	}
	for _, f := range rrq.ctx.Fields {
		if !resourcerun.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
		}
	}
	if rrq.path != nil {
		prev, err := rrq.path(ctx)
		if err != nil {
			return err
		}
		rrq.sql = prev
	}
	return nil
}

func (rrq *ResourceRunQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ResourceRun, error) {
	var (
		nodes       = []*ResourceRun{}
		_spec       = rrq.querySpec()
		loadedTypes = [3]bool{
			rrq.withProject != nil,
			rrq.withEnvironment != nil,
			rrq.withResource != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ResourceRun).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ResourceRun{config: rrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = rrq.schemaConfig.ResourceRun
	ctx = internal.NewSchemaConfigContext(ctx, rrq.schemaConfig)
	if len(rrq.modifiers) > 0 {
		_spec.Modifiers = rrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rrq.withProject; query != nil {
		if err := rrq.loadProject(ctx, query, nodes, nil,
			func(n *ResourceRun, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := rrq.withEnvironment; query != nil {
		if err := rrq.loadEnvironment(ctx, query, nodes, nil,
			func(n *ResourceRun, e *Environment) { n.Edges.Environment = e }); err != nil {
			return nil, err
		}
	}
	if query := rrq.withResource; query != nil {
		if err := rrq.loadResource(ctx, query, nodes, nil,
			func(n *ResourceRun, e *Resource) { n.Edges.Resource = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rrq *ResourceRunQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*ResourceRun, init func(*ResourceRun), assign func(*ResourceRun, *Project)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*ResourceRun)
	for i := range nodes {
		fk := nodes[i].ProjectID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rrq *ResourceRunQuery) loadEnvironment(ctx context.Context, query *EnvironmentQuery, nodes []*ResourceRun, init func(*ResourceRun), assign func(*ResourceRun, *Environment)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*ResourceRun)
	for i := range nodes {
		fk := nodes[i].EnvironmentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(environment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "environment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rrq *ResourceRunQuery) loadResource(ctx context.Context, query *ResourceQuery, nodes []*ResourceRun, init func(*ResourceRun), assign func(*ResourceRun, *Resource)) error {
	ids := make([]object.ID, 0, len(nodes))
	nodeids := make(map[object.ID][]*ResourceRun)
	for i := range nodes {
		fk := nodes[i].ResourceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(resource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "resource_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rrq *ResourceRunQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rrq.querySpec()
	_spec.Node.Schema = rrq.schemaConfig.ResourceRun
	ctx = internal.NewSchemaConfigContext(ctx, rrq.schemaConfig)
	if len(rrq.modifiers) > 0 {
		_spec.Modifiers = rrq.modifiers
	}
	_spec.Node.Columns = rrq.ctx.Fields
	if len(rrq.ctx.Fields) > 0 {
		_spec.Unique = rrq.ctx.Unique != nil && *rrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rrq.driver, _spec)
}

func (rrq *ResourceRunQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(resourcerun.Table, resourcerun.Columns, sqlgraph.NewFieldSpec(resourcerun.FieldID, field.TypeString))
	_spec.From = rrq.sql
	if unique := rrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rrq.path != nil {
		_spec.Unique = true
	}
	if fields := rrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resourcerun.FieldID)
		for i := range fields {
			if fields[i] != resourcerun.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rrq.withProject != nil {
			_spec.Node.AddColumnOnce(resourcerun.FieldProjectID)
		}
		if rrq.withEnvironment != nil {
			_spec.Node.AddColumnOnce(resourcerun.FieldEnvironmentID)
		}
		if rrq.withResource != nil {
			_spec.Node.AddColumnOnce(resourcerun.FieldResourceID)
		}
	}
	if ps := rrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rrq *ResourceRunQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rrq.driver.Dialect())
	t1 := builder.Table(resourcerun.Table)
	columns := rrq.ctx.Fields
	if len(columns) == 0 {
		columns = resourcerun.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rrq.sql != nil {
		selector = rrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rrq.ctx.Unique != nil && *rrq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(rrq.schemaConfig.ResourceRun)
	ctx = internal.NewSchemaConfigContext(ctx, rrq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range rrq.modifiers {
		m(selector)
	}
	for _, p := range rrq.predicates {
		p(selector)
	}
	for _, p := range rrq.order {
		p(selector)
	}
	if offset := rrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (rrq *ResourceRunQuery) ForUpdate(opts ...sql.LockOption) *ResourceRunQuery {
	if rrq.driver.Dialect() == dialect.Postgres {
		rrq.Unique(false)
	}
	rrq.modifiers = append(rrq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return rrq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (rrq *ResourceRunQuery) ForShare(opts ...sql.LockOption) *ResourceRunQuery {
	if rrq.driver.Dialect() == dialect.Postgres {
		rrq.Unique(false)
	}
	rrq.modifiers = append(rrq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return rrq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rrq *ResourceRunQuery) Modify(modifiers ...func(s *sql.Selector)) *ResourceRunSelect {
	rrq.modifiers = append(rrq.modifiers, modifiers...)
	return rrq.Select()
}

// WhereP appends storage-level predicates to the ResourceRunQuery builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (rrq *ResourceRunQuery) WhereP(ps ...func(*sql.Selector)) {
	var wps = make([]predicate.ResourceRun, 0, len(ps))
	for i := 0; i < len(ps); i++ {
		wps = append(wps, predicate.ResourceRun(ps[i]))
	}
	rrq.predicates = append(rrq.predicates, wps...)
}

// ResourceRunGroupBy is the group-by builder for ResourceRun entities.
type ResourceRunGroupBy struct {
	selector
	build *ResourceRunQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rrgb *ResourceRunGroupBy) Aggregate(fns ...AggregateFunc) *ResourceRunGroupBy {
	rrgb.fns = append(rrgb.fns, fns...)
	return rrgb
}

// Scan applies the selector query and scans the result into the given value.
func (rrgb *ResourceRunGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rrgb.build.ctx, "GroupBy")
	if err := rrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ResourceRunQuery, *ResourceRunGroupBy](ctx, rrgb.build, rrgb, rrgb.build.inters, v)
}

func (rrgb *ResourceRunGroupBy) sqlScan(ctx context.Context, root *ResourceRunQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rrgb.fns))
	for _, fn := range rrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rrgb.flds)+len(rrgb.fns))
		for _, f := range *rrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ResourceRunSelect is the builder for selecting fields of ResourceRun entities.
type ResourceRunSelect struct {
	*ResourceRunQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rrs *ResourceRunSelect) Aggregate(fns ...AggregateFunc) *ResourceRunSelect {
	rrs.fns = append(rrs.fns, fns...)
	return rrs
}

// Scan applies the selector query and scans the result into the given value.
func (rrs *ResourceRunSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rrs.ctx, "Select")
	if err := rrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ResourceRunQuery, *ResourceRunSelect](ctx, rrs.ResourceRunQuery, rrs, rrs.inters, v)
}

func (rrs *ResourceRunSelect) sqlScan(ctx context.Context, root *ResourceRunQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rrs.fns))
	for _, fn := range rrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rrs *ResourceRunSelect) Modify(modifiers ...func(s *sql.Selector)) *ResourceRunSelect {
	rrs.modifiers = append(rrs.modifiers, modifiers...)
	return rrs
}
