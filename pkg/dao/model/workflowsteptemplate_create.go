// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/workflowsteptemplate"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/property"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// WorkflowStepTemplateCreate is the builder for creating a WorkflowStepTemplate entity.
type WorkflowStepTemplateCreate struct {
	config
	mutation   *WorkflowStepTemplateMutation
	hooks      []Hook
	conflict   []sql.ConflictOption
	object     *WorkflowStepTemplate
	fromUpsert bool
}

// SetName sets the "name" field.
func (wstc *WorkflowStepTemplateCreate) SetName(s string) *WorkflowStepTemplateCreate {
	wstc.mutation.SetName(s)
	return wstc
}

// SetDescription sets the "description" field.
func (wstc *WorkflowStepTemplateCreate) SetDescription(s string) *WorkflowStepTemplateCreate {
	wstc.mutation.SetDescription(s)
	return wstc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wstc *WorkflowStepTemplateCreate) SetNillableDescription(s *string) *WorkflowStepTemplateCreate {
	if s != nil {
		wstc.SetDescription(*s)
	}
	return wstc
}

// SetLabels sets the "labels" field.
func (wstc *WorkflowStepTemplateCreate) SetLabels(m map[string]string) *WorkflowStepTemplateCreate {
	wstc.mutation.SetLabels(m)
	return wstc
}

// SetAnnotations sets the "annotations" field.
func (wstc *WorkflowStepTemplateCreate) SetAnnotations(m map[string]string) *WorkflowStepTemplateCreate {
	wstc.mutation.SetAnnotations(m)
	return wstc
}

// SetCreateTime sets the "create_time" field.
func (wstc *WorkflowStepTemplateCreate) SetCreateTime(t time.Time) *WorkflowStepTemplateCreate {
	wstc.mutation.SetCreateTime(t)
	return wstc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wstc *WorkflowStepTemplateCreate) SetNillableCreateTime(t *time.Time) *WorkflowStepTemplateCreate {
	if t != nil {
		wstc.SetCreateTime(*t)
	}
	return wstc
}

// SetUpdateTime sets the "update_time" field.
func (wstc *WorkflowStepTemplateCreate) SetUpdateTime(t time.Time) *WorkflowStepTemplateCreate {
	wstc.mutation.SetUpdateTime(t)
	return wstc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wstc *WorkflowStepTemplateCreate) SetNillableUpdateTime(t *time.Time) *WorkflowStepTemplateCreate {
	if t != nil {
		wstc.SetUpdateTime(*t)
	}
	return wstc
}

// SetStatus sets the "status" field.
func (wstc *WorkflowStepTemplateCreate) SetStatus(s status.Status) *WorkflowStepTemplateCreate {
	wstc.mutation.SetStatus(s)
	return wstc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wstc *WorkflowStepTemplateCreate) SetNillableStatus(s *status.Status) *WorkflowStepTemplateCreate {
	if s != nil {
		wstc.SetStatus(*s)
	}
	return wstc
}

// SetType sets the "type" field.
func (wstc *WorkflowStepTemplateCreate) SetType(s string) *WorkflowStepTemplateCreate {
	wstc.mutation.SetType(s)
	return wstc
}

// SetSchema sets the "schema" field.
func (wstc *WorkflowStepTemplateCreate) SetSchema(pr property.Schemas) *WorkflowStepTemplateCreate {
	wstc.mutation.SetSchema(pr)
	return wstc
}

// SetID sets the "id" field.
func (wstc *WorkflowStepTemplateCreate) SetID(o object.ID) *WorkflowStepTemplateCreate {
	wstc.mutation.SetID(o)
	return wstc
}

// Mutation returns the WorkflowStepTemplateMutation object of the builder.
func (wstc *WorkflowStepTemplateCreate) Mutation() *WorkflowStepTemplateMutation {
	return wstc.mutation
}

// Save creates the WorkflowStepTemplate in the database.
func (wstc *WorkflowStepTemplateCreate) Save(ctx context.Context) (*WorkflowStepTemplate, error) {
	if err := wstc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wstc.sqlSave, wstc.mutation, wstc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wstc *WorkflowStepTemplateCreate) SaveX(ctx context.Context) *WorkflowStepTemplate {
	v, err := wstc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wstc *WorkflowStepTemplateCreate) Exec(ctx context.Context) error {
	_, err := wstc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wstc *WorkflowStepTemplateCreate) ExecX(ctx context.Context) {
	if err := wstc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wstc *WorkflowStepTemplateCreate) defaults() error {
	if _, ok := wstc.mutation.Labels(); !ok {
		v := workflowsteptemplate.DefaultLabels
		wstc.mutation.SetLabels(v)
	}
	if _, ok := wstc.mutation.Annotations(); !ok {
		v := workflowsteptemplate.DefaultAnnotations
		wstc.mutation.SetAnnotations(v)
	}
	if _, ok := wstc.mutation.CreateTime(); !ok {
		if workflowsteptemplate.DefaultCreateTime == nil {
			return fmt.Errorf("model: uninitialized workflowsteptemplate.DefaultCreateTime (forgotten import model/runtime?)")
		}
		v := workflowsteptemplate.DefaultCreateTime()
		wstc.mutation.SetCreateTime(v)
	}
	if _, ok := wstc.mutation.UpdateTime(); !ok {
		if workflowsteptemplate.DefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized workflowsteptemplate.DefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := workflowsteptemplate.DefaultUpdateTime()
		wstc.mutation.SetUpdateTime(v)
	}
	if _, ok := wstc.mutation.Schema(); !ok {
		v := workflowsteptemplate.DefaultSchema
		wstc.mutation.SetSchema(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wstc *WorkflowStepTemplateCreate) check() error {
	if _, ok := wstc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`model: missing required field "WorkflowStepTemplate.name"`)}
	}
	if v, ok := wstc.mutation.Name(); ok {
		if err := workflowsteptemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`model: validator failed for field "WorkflowStepTemplate.name": %w`, err)}
		}
	}
	if _, ok := wstc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`model: missing required field "WorkflowStepTemplate.create_time"`)}
	}
	if _, ok := wstc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`model: missing required field "WorkflowStepTemplate.update_time"`)}
	}
	if _, ok := wstc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`model: missing required field "WorkflowStepTemplate.type"`)}
	}
	if v, ok := wstc.mutation.GetType(); ok {
		if err := workflowsteptemplate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`model: validator failed for field "WorkflowStepTemplate.type": %w`, err)}
		}
	}
	if _, ok := wstc.mutation.Schema(); !ok {
		return &ValidationError{Name: "schema", err: errors.New(`model: missing required field "WorkflowStepTemplate.schema"`)}
	}
	return nil
}

func (wstc *WorkflowStepTemplateCreate) sqlSave(ctx context.Context) (*WorkflowStepTemplate, error) {
	if err := wstc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wstc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wstc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*object.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wstc.mutation.id = &_node.ID
	wstc.mutation.done = true
	return _node, nil
}

func (wstc *WorkflowStepTemplateCreate) createSpec() (*WorkflowStepTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowStepTemplate{config: wstc.config}
		_spec = sqlgraph.NewCreateSpec(workflowsteptemplate.Table, sqlgraph.NewFieldSpec(workflowsteptemplate.FieldID, field.TypeString))
	)
	_spec.Schema = wstc.schemaConfig.WorkflowStepTemplate
	_spec.OnConflict = wstc.conflict
	if id, ok := wstc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wstc.mutation.Name(); ok {
		_spec.SetField(workflowsteptemplate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wstc.mutation.Description(); ok {
		_spec.SetField(workflowsteptemplate.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := wstc.mutation.Labels(); ok {
		_spec.SetField(workflowsteptemplate.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := wstc.mutation.Annotations(); ok {
		_spec.SetField(workflowsteptemplate.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if value, ok := wstc.mutation.CreateTime(); ok {
		_spec.SetField(workflowsteptemplate.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = &value
	}
	if value, ok := wstc.mutation.UpdateTime(); ok {
		_spec.SetField(workflowsteptemplate.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = &value
	}
	if value, ok := wstc.mutation.Status(); ok {
		_spec.SetField(workflowsteptemplate.FieldStatus, field.TypeJSON, value)
		_node.Status = value
	}
	if value, ok := wstc.mutation.GetType(); ok {
		_spec.SetField(workflowsteptemplate.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := wstc.mutation.Schema(); ok {
		_spec.SetField(workflowsteptemplate.FieldSchema, field.TypeOther, value)
		_node.Schema = value
	}
	return _node, _spec
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wstc *WorkflowStepTemplateCreate) Set(obj *WorkflowStepTemplate) *WorkflowStepTemplateCreate {
	// Required.
	wstc.SetName(obj.Name)
	wstc.SetType(obj.Type)
	wstc.SetSchema(obj.Schema)

	// Optional.
	if obj.Description != "" {
		wstc.SetDescription(obj.Description)
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		wstc.SetLabels(obj.Labels)
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		wstc.SetAnnotations(obj.Annotations)
	}
	if obj.CreateTime != nil {
		wstc.SetCreateTime(*obj.CreateTime)
	}
	if obj.UpdateTime != nil {
		wstc.SetUpdateTime(*obj.UpdateTime)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		wstc.SetStatus(obj.Status)
	}

	// Record the given object.
	wstc.object = obj

	return wstc
}

// getClientSet returns the ClientSet for the given builder.
func (wstc *WorkflowStepTemplateCreate) getClientSet() (mc ClientSet) {
	if _, ok := wstc.config.driver.(*txDriver); ok {
		tx := &Tx{config: wstc.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wstc.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the WorkflowStepTemplate entity,
// which is always good for cascading create operations.
func (wstc *WorkflowStepTemplateCreate) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepTemplate) error) (*WorkflowStepTemplate, error) {
	obj, err := wstc.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := wstc.getClientSet()

	if x := wstc.object; x != nil {
		if _, set := wstc.mutation.Field(workflowsteptemplate.FieldName); set {
			obj.Name = x.Name
		}
		if _, set := wstc.mutation.Field(workflowsteptemplate.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := wstc.mutation.Field(workflowsteptemplate.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := wstc.mutation.Field(workflowsteptemplate.FieldType); set {
			obj.Type = x.Type
		}
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wstc *WorkflowStepTemplateCreate) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepTemplate) error) *WorkflowStepTemplate {
	obj, err := wstc.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (wstc *WorkflowStepTemplateCreate) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepTemplate) error) error {
	_, err := wstc.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (wstc *WorkflowStepTemplateCreate) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepTemplate) error) {
	if err := wstc.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Set leverages the WorkflowStepTemplateCreate Set method,
// it sets the value by judging the definition of each field within the entire item of the given list.
//
// For required fields, Set calls directly.
//
// For optional fields, Set calls if the value is not zero.
//
// For example:
//
//	## Required
//
//	db.SetX(obj.X)
//
//	## Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wstcb *WorkflowStepTemplateCreateBulk) Set(objs ...*WorkflowStepTemplate) *WorkflowStepTemplateCreateBulk {
	if len(objs) != 0 {
		client := NewWorkflowStepTemplateClient(wstcb.config)

		wstcb.builders = make([]*WorkflowStepTemplateCreate, len(objs))
		for i := range objs {
			wstcb.builders[i] = client.Create().Set(objs[i])
		}

		// Record the given objects.
		wstcb.objects = objs
	}

	return wstcb
}

// getClientSet returns the ClientSet for the given builder.
func (wstcb *WorkflowStepTemplateCreateBulk) getClientSet() (mc ClientSet) {
	if _, ok := wstcb.config.driver.(*txDriver); ok {
		tx := &Tx{config: wstcb.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wstcb.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after created the WorkflowStepTemplate entities,
// which is always good for cascading create operations.
func (wstcb *WorkflowStepTemplateCreateBulk) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepTemplate) error) ([]*WorkflowStepTemplate, error) {
	objs, err := wstcb.Save(ctx)
	if err != nil {
		return nil, err
	}

	if len(cbs) == 0 {
		return objs, err
	}

	mc := wstcb.getClientSet()

	if x := wstcb.objects; x != nil {
		for i := range x {
			if _, set := wstcb.builders[i].mutation.Field(workflowsteptemplate.FieldName); set {
				objs[i].Name = x[i].Name
			}
			if _, set := wstcb.builders[i].mutation.Field(workflowsteptemplate.FieldDescription); set {
				objs[i].Description = x[i].Description
			}
			if _, set := wstcb.builders[i].mutation.Field(workflowsteptemplate.FieldStatus); set {
				objs[i].Status = x[i].Status
			}
			if _, set := wstcb.builders[i].mutation.Field(workflowsteptemplate.FieldType); set {
				objs[i].Type = x[i].Type
			}
		}
	}

	for i := range objs {
		for j := range cbs {
			if err = cbs[j](ctx, mc, objs[i]); err != nil {
				return nil, err
			}
		}
	}

	return objs, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wstcb *WorkflowStepTemplateCreateBulk) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepTemplate) error) []*WorkflowStepTemplate {
	objs, err := wstcb.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return objs
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (wstcb *WorkflowStepTemplateCreateBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepTemplate) error) error {
	_, err := wstcb.SaveE(ctx, cbs...)
	return err
}

// ExecEX is like ExecE, but panics if an error occurs.
func (wstcb *WorkflowStepTemplateCreateBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, created *WorkflowStepTemplate) error) {
	if err := wstcb.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *WorkflowStepTemplateUpsertOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStepTemplate) error) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStepTemplateUpsertOne.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *WorkflowStepTemplateUpsertOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStepTemplate) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// ExecE calls the given function after executed the query,
// which is always good for cascading create operations.
func (u *WorkflowStepTemplateUpsertBulk) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStepTemplate) error) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the WorkflowStepTemplateUpsertBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStepTemplateUpsertBulk.OnConflict")
	}
	u.create.fromUpsert = true
	return u.create.ExecE(ctx, cbs...)
}

// ExecEX is like ExecE, but panics if an error occurs.
func (u *WorkflowStepTemplateUpsertBulk) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStepTemplate) error) {
	if err := u.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkflowStepTemplate.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowStepTemplateUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wstc *WorkflowStepTemplateCreate) OnConflict(opts ...sql.ConflictOption) *WorkflowStepTemplateUpsertOne {
	wstc.conflict = opts
	return &WorkflowStepTemplateUpsertOne{
		create: wstc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkflowStepTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wstc *WorkflowStepTemplateCreate) OnConflictColumns(columns ...string) *WorkflowStepTemplateUpsertOne {
	wstc.conflict = append(wstc.conflict, sql.ConflictColumns(columns...))
	return &WorkflowStepTemplateUpsertOne{
		create: wstc,
	}
}

type (
	// WorkflowStepTemplateUpsertOne is the builder for "upsert"-ing
	//  one WorkflowStepTemplate node.
	WorkflowStepTemplateUpsertOne struct {
		create *WorkflowStepTemplateCreate
	}

	// WorkflowStepTemplateUpsert is the "OnConflict" setter.
	WorkflowStepTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *WorkflowStepTemplateUpsert) SetDescription(v string) *WorkflowStepTemplateUpsert {
	u.Set(workflowsteptemplate.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsert) UpdateDescription() *WorkflowStepTemplateUpsert {
	u.SetExcluded(workflowsteptemplate.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowStepTemplateUpsert) ClearDescription() *WorkflowStepTemplateUpsert {
	u.SetNull(workflowsteptemplate.FieldDescription)
	return u
}

// SetLabels sets the "labels" field.
func (u *WorkflowStepTemplateUpsert) SetLabels(v map[string]string) *WorkflowStepTemplateUpsert {
	u.Set(workflowsteptemplate.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsert) UpdateLabels() *WorkflowStepTemplateUpsert {
	u.SetExcluded(workflowsteptemplate.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowStepTemplateUpsert) ClearLabels() *WorkflowStepTemplateUpsert {
	u.SetNull(workflowsteptemplate.FieldLabels)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowStepTemplateUpsert) SetAnnotations(v map[string]string) *WorkflowStepTemplateUpsert {
	u.Set(workflowsteptemplate.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsert) UpdateAnnotations() *WorkflowStepTemplateUpsert {
	u.SetExcluded(workflowsteptemplate.FieldAnnotations)
	return u
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowStepTemplateUpsert) ClearAnnotations() *WorkflowStepTemplateUpsert {
	u.SetNull(workflowsteptemplate.FieldAnnotations)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowStepTemplateUpsert) SetUpdateTime(v time.Time) *WorkflowStepTemplateUpsert {
	u.Set(workflowsteptemplate.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsert) UpdateUpdateTime() *WorkflowStepTemplateUpsert {
	u.SetExcluded(workflowsteptemplate.FieldUpdateTime)
	return u
}

// SetStatus sets the "status" field.
func (u *WorkflowStepTemplateUpsert) SetStatus(v status.Status) *WorkflowStepTemplateUpsert {
	u.Set(workflowsteptemplate.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsert) UpdateStatus() *WorkflowStepTemplateUpsert {
	u.SetExcluded(workflowsteptemplate.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *WorkflowStepTemplateUpsert) ClearStatus() *WorkflowStepTemplateUpsert {
	u.SetNull(workflowsteptemplate.FieldStatus)
	return u
}

// SetSchema sets the "schema" field.
func (u *WorkflowStepTemplateUpsert) SetSchema(v property.Schemas) *WorkflowStepTemplateUpsert {
	u.Set(workflowsteptemplate.FieldSchema, v)
	return u
}

// UpdateSchema sets the "schema" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsert) UpdateSchema() *WorkflowStepTemplateUpsert {
	u.SetExcluded(workflowsteptemplate.FieldSchema)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WorkflowStepTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workflowsteptemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkflowStepTemplateUpsertOne) UpdateNewValues() *WorkflowStepTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workflowsteptemplate.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(workflowsteptemplate.FieldName)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(workflowsteptemplate.FieldCreateTime)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(workflowsteptemplate.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkflowStepTemplate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkflowStepTemplateUpsertOne) Ignore() *WorkflowStepTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowStepTemplateUpsertOne) DoNothing() *WorkflowStepTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowStepTemplateCreate.OnConflict
// documentation for more info.
func (u *WorkflowStepTemplateUpsertOne) Update(set func(*WorkflowStepTemplateUpsert)) *WorkflowStepTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowStepTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *WorkflowStepTemplateUpsertOne) SetDescription(v string) *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsertOne) UpdateDescription() *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowStepTemplateUpsertOne) ClearDescription() *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *WorkflowStepTemplateUpsertOne) SetLabels(v map[string]string) *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsertOne) UpdateLabels() *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowStepTemplateUpsertOne) ClearLabels() *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowStepTemplateUpsertOne) SetAnnotations(v map[string]string) *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsertOne) UpdateAnnotations() *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowStepTemplateUpsertOne) ClearAnnotations() *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowStepTemplateUpsertOne) SetUpdateTime(v time.Time) *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsertOne) UpdateUpdateTime() *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *WorkflowStepTemplateUpsertOne) SetStatus(v status.Status) *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsertOne) UpdateStatus() *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *WorkflowStepTemplateUpsertOne) ClearStatus() *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.ClearStatus()
	})
}

// SetSchema sets the "schema" field.
func (u *WorkflowStepTemplateUpsertOne) SetSchema(v property.Schemas) *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.SetSchema(v)
	})
}

// UpdateSchema sets the "schema" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsertOne) UpdateSchema() *WorkflowStepTemplateUpsertOne {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.UpdateSchema()
	})
}

// Exec executes the query.
func (u *WorkflowStepTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStepTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowStepTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkflowStepTemplateUpsertOne) ID(ctx context.Context) (id object.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("model: WorkflowStepTemplateUpsertOne.ID is not supported by MySQL driver. Use WorkflowStepTemplateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkflowStepTemplateUpsertOne) IDX(ctx context.Context) object.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkflowStepTemplateCreateBulk is the builder for creating many WorkflowStepTemplate entities in bulk.
type WorkflowStepTemplateCreateBulk struct {
	config
	builders   []*WorkflowStepTemplateCreate
	conflict   []sql.ConflictOption
	objects    []*WorkflowStepTemplate
	fromUpsert bool
}

// Save creates the WorkflowStepTemplate entities in the database.
func (wstcb *WorkflowStepTemplateCreateBulk) Save(ctx context.Context) ([]*WorkflowStepTemplate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wstcb.builders))
	nodes := make([]*WorkflowStepTemplate, len(wstcb.builders))
	mutators := make([]Mutator, len(wstcb.builders))
	for i := range wstcb.builders {
		func(i int, root context.Context) {
			builder := wstcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowStepTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wstcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wstcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wstcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wstcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wstcb *WorkflowStepTemplateCreateBulk) SaveX(ctx context.Context) []*WorkflowStepTemplate {
	v, err := wstcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wstcb *WorkflowStepTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := wstcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wstcb *WorkflowStepTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := wstcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkflowStepTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkflowStepTemplateUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (wstcb *WorkflowStepTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkflowStepTemplateUpsertBulk {
	wstcb.conflict = opts
	return &WorkflowStepTemplateUpsertBulk{
		create: wstcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkflowStepTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wstcb *WorkflowStepTemplateCreateBulk) OnConflictColumns(columns ...string) *WorkflowStepTemplateUpsertBulk {
	wstcb.conflict = append(wstcb.conflict, sql.ConflictColumns(columns...))
	return &WorkflowStepTemplateUpsertBulk{
		create: wstcb,
	}
}

// WorkflowStepTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkflowStepTemplate nodes.
type WorkflowStepTemplateUpsertBulk struct {
	create *WorkflowStepTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkflowStepTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workflowsteptemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkflowStepTemplateUpsertBulk) UpdateNewValues() *WorkflowStepTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workflowsteptemplate.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(workflowsteptemplate.FieldName)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(workflowsteptemplate.FieldCreateTime)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(workflowsteptemplate.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkflowStepTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkflowStepTemplateUpsertBulk) Ignore() *WorkflowStepTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkflowStepTemplateUpsertBulk) DoNothing() *WorkflowStepTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkflowStepTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *WorkflowStepTemplateUpsertBulk) Update(set func(*WorkflowStepTemplateUpsert)) *WorkflowStepTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkflowStepTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *WorkflowStepTemplateUpsertBulk) SetDescription(v string) *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsertBulk) UpdateDescription() *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkflowStepTemplateUpsertBulk) ClearDescription() *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.ClearDescription()
	})
}

// SetLabels sets the "labels" field.
func (u *WorkflowStepTemplateUpsertBulk) SetLabels(v map[string]string) *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsertBulk) UpdateLabels() *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *WorkflowStepTemplateUpsertBulk) ClearLabels() *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.ClearLabels()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *WorkflowStepTemplateUpsertBulk) SetAnnotations(v map[string]string) *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsertBulk) UpdateAnnotations() *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.UpdateAnnotations()
	})
}

// ClearAnnotations clears the value of the "annotations" field.
func (u *WorkflowStepTemplateUpsertBulk) ClearAnnotations() *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.ClearAnnotations()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *WorkflowStepTemplateUpsertBulk) SetUpdateTime(v time.Time) *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsertBulk) UpdateUpdateTime() *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *WorkflowStepTemplateUpsertBulk) SetStatus(v status.Status) *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsertBulk) UpdateStatus() *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *WorkflowStepTemplateUpsertBulk) ClearStatus() *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.ClearStatus()
	})
}

// SetSchema sets the "schema" field.
func (u *WorkflowStepTemplateUpsertBulk) SetSchema(v property.Schemas) *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.SetSchema(v)
	})
}

// UpdateSchema sets the "schema" field to the value that was provided on create.
func (u *WorkflowStepTemplateUpsertBulk) UpdateSchema() *WorkflowStepTemplateUpsertBulk {
	return u.Update(func(s *WorkflowStepTemplateUpsert) {
		s.UpdateSchema()
	})
}

// Exec executes the query.
func (u *WorkflowStepTemplateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("model: OnConflict was set for builder %d. Set it on the WorkflowStepTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("model: missing options for WorkflowStepTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkflowStepTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
