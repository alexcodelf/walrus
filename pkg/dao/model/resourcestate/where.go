// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package resourcestate

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/types/object"
)

// ID filters vertices based on their ID field.
func ID(id object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldLTE(FieldID, id))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldEQ(FieldData, v))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldEQ(FieldResourceID, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldLTE(FieldData, v))
}

// DataContains applies the Contains predicate on the "data" field.
func DataContains(v string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldContains(FieldData, v))
}

// DataHasPrefix applies the HasPrefix predicate on the "data" field.
func DataHasPrefix(v string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldHasPrefix(FieldData, v))
}

// DataHasSuffix applies the HasSuffix predicate on the "data" field.
func DataHasSuffix(v string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldHasSuffix(FieldData, v))
}

// DataEqualFold applies the EqualFold predicate on the "data" field.
func DataEqualFold(v string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldEqualFold(FieldData, v))
}

// DataContainsFold applies the ContainsFold predicate on the "data" field.
func DataContainsFold(v string) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldContainsFold(FieldData, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v object.ID) predicate.ResourceState {
	return predicate.ResourceState(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v object.ID) predicate.ResourceState {
	vc := string(v)
	return predicate.ResourceState(sql.FieldContains(FieldResourceID, vc))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v object.ID) predicate.ResourceState {
	vc := string(v)
	return predicate.ResourceState(sql.FieldHasPrefix(FieldResourceID, vc))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v object.ID) predicate.ResourceState {
	vc := string(v)
	return predicate.ResourceState(sql.FieldHasSuffix(FieldResourceID, vc))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v object.ID) predicate.ResourceState {
	vc := string(v)
	return predicate.ResourceState(sql.FieldEqualFold(FieldResourceID, vc))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v object.ID) predicate.ResourceState {
	vc := string(v)
	return predicate.ResourceState(sql.FieldContainsFold(FieldResourceID, vc))
}

// HasResource applies the HasEdge predicate on the "resource" edge.
func HasResource() predicate.ResourceState {
	return predicate.ResourceState(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ResourceTable, ResourceColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Resource
		step.Edge.Schema = schemaConfig.ResourceState
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResourceWith applies the HasEdge predicate on the "resource" edge with a given conditions (other predicates).
func HasResourceWith(preds ...predicate.Resource) predicate.ResourceState {
	return predicate.ResourceState(func(s *sql.Selector) {
		step := newResourceStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Resource
		step.Edge.Schema = schemaConfig.ResourceState
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ResourceState) predicate.ResourceState {
	return predicate.ResourceState(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ResourceState) predicate.ResourceState {
	return predicate.ResourceState(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ResourceState) predicate.ResourceState {
	return predicate.ResourceState(sql.NotPredicates(p))
}
