// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/resourcestate"
)

// ResourceStateDelete is the builder for deleting a ResourceState entity.
type ResourceStateDelete struct {
	config
	hooks    []Hook
	mutation *ResourceStateMutation
}

// Where appends a list predicates to the ResourceStateDelete builder.
func (rsd *ResourceStateDelete) Where(ps ...predicate.ResourceState) *ResourceStateDelete {
	rsd.mutation.Where(ps...)
	return rsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rsd *ResourceStateDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rsd.sqlExec, rsd.mutation, rsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rsd *ResourceStateDelete) ExecX(ctx context.Context) int {
	n, err := rsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rsd *ResourceStateDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(resourcestate.Table, sqlgraph.NewFieldSpec(resourcestate.FieldID, field.TypeString))
	_spec.Node.Schema = rsd.schemaConfig.ResourceState
	ctx = internal.NewSchemaConfigContext(ctx, rsd.schemaConfig)
	if ps := rsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rsd.mutation.done = true
	return affected, err
}

// ResourceStateDeleteOne is the builder for deleting a single ResourceState entity.
type ResourceStateDeleteOne struct {
	rsd *ResourceStateDelete
}

// Where appends a list predicates to the ResourceStateDelete builder.
func (rsdo *ResourceStateDeleteOne) Where(ps ...predicate.ResourceState) *ResourceStateDeleteOne {
	rsdo.rsd.mutation.Where(ps...)
	return rsdo
}

// Exec executes the deletion query.
func (rsdo *ResourceStateDeleteOne) Exec(ctx context.Context) error {
	n, err := rsdo.rsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{resourcestate.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rsdo *ResourceStateDeleteOne) ExecX(ctx context.Context) {
	if err := rsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
