// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	stdsql "database/sql"
	"errors"
	"fmt"
	"reflect"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"github.com/seal-io/walrus/pkg/dao/model/internal"
	"github.com/seal-io/walrus/pkg/dao/model/predicate"
	"github.com/seal-io/walrus/pkg/dao/model/workflowsteptemplate"
	"github.com/seal-io/walrus/pkg/dao/types/property"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// WorkflowStepTemplateUpdate is the builder for updating WorkflowStepTemplate entities.
type WorkflowStepTemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *WorkflowStepTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *WorkflowStepTemplate
}

// Where appends a list predicates to the WorkflowStepTemplateUpdate builder.
func (wstu *WorkflowStepTemplateUpdate) Where(ps ...predicate.WorkflowStepTemplate) *WorkflowStepTemplateUpdate {
	wstu.mutation.Where(ps...)
	return wstu
}

// SetDescription sets the "description" field.
func (wstu *WorkflowStepTemplateUpdate) SetDescription(s string) *WorkflowStepTemplateUpdate {
	wstu.mutation.SetDescription(s)
	return wstu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wstu *WorkflowStepTemplateUpdate) SetNillableDescription(s *string) *WorkflowStepTemplateUpdate {
	if s != nil {
		wstu.SetDescription(*s)
	}
	return wstu
}

// ClearDescription clears the value of the "description" field.
func (wstu *WorkflowStepTemplateUpdate) ClearDescription() *WorkflowStepTemplateUpdate {
	wstu.mutation.ClearDescription()
	return wstu
}

// SetLabels sets the "labels" field.
func (wstu *WorkflowStepTemplateUpdate) SetLabels(m map[string]string) *WorkflowStepTemplateUpdate {
	wstu.mutation.SetLabels(m)
	return wstu
}

// ClearLabels clears the value of the "labels" field.
func (wstu *WorkflowStepTemplateUpdate) ClearLabels() *WorkflowStepTemplateUpdate {
	wstu.mutation.ClearLabels()
	return wstu
}

// SetAnnotations sets the "annotations" field.
func (wstu *WorkflowStepTemplateUpdate) SetAnnotations(m map[string]string) *WorkflowStepTemplateUpdate {
	wstu.mutation.SetAnnotations(m)
	return wstu
}

// ClearAnnotations clears the value of the "annotations" field.
func (wstu *WorkflowStepTemplateUpdate) ClearAnnotations() *WorkflowStepTemplateUpdate {
	wstu.mutation.ClearAnnotations()
	return wstu
}

// SetUpdateTime sets the "update_time" field.
func (wstu *WorkflowStepTemplateUpdate) SetUpdateTime(t time.Time) *WorkflowStepTemplateUpdate {
	wstu.mutation.SetUpdateTime(t)
	return wstu
}

// SetStatus sets the "status" field.
func (wstu *WorkflowStepTemplateUpdate) SetStatus(s status.Status) *WorkflowStepTemplateUpdate {
	wstu.mutation.SetStatus(s)
	return wstu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wstu *WorkflowStepTemplateUpdate) SetNillableStatus(s *status.Status) *WorkflowStepTemplateUpdate {
	if s != nil {
		wstu.SetStatus(*s)
	}
	return wstu
}

// ClearStatus clears the value of the "status" field.
func (wstu *WorkflowStepTemplateUpdate) ClearStatus() *WorkflowStepTemplateUpdate {
	wstu.mutation.ClearStatus()
	return wstu
}

// SetSchema sets the "schema" field.
func (wstu *WorkflowStepTemplateUpdate) SetSchema(pr property.Schemas) *WorkflowStepTemplateUpdate {
	wstu.mutation.SetSchema(pr)
	return wstu
}

// Mutation returns the WorkflowStepTemplateMutation object of the builder.
func (wstu *WorkflowStepTemplateUpdate) Mutation() *WorkflowStepTemplateMutation {
	return wstu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wstu *WorkflowStepTemplateUpdate) Save(ctx context.Context) (int, error) {
	if err := wstu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, wstu.sqlSave, wstu.mutation, wstu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wstu *WorkflowStepTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := wstu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wstu *WorkflowStepTemplateUpdate) Exec(ctx context.Context) error {
	_, err := wstu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wstu *WorkflowStepTemplateUpdate) ExecX(ctx context.Context) {
	if err := wstu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wstu *WorkflowStepTemplateUpdate) defaults() error {
	if _, ok := wstu.mutation.UpdateTime(); !ok {
		if workflowsteptemplate.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized workflowsteptemplate.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := workflowsteptemplate.UpdateDefaultUpdateTime()
		wstu.mutation.SetUpdateTime(v)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value is not zero.
//
// For no default but required fields, Set calls directly.
//
// For no default but optional fields, Set calls if the value is not zero,
// or clears if the value is zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) {
//	   db.SetX(obj.X)
//	}
func (wstu *WorkflowStepTemplateUpdate) Set(obj *WorkflowStepTemplate) *WorkflowStepTemplateUpdate {
	// Without Default.
	if obj.Description != "" {
		wstu.SetDescription(obj.Description)
	} else {
		wstu.ClearDescription()
	}
	if !reflect.ValueOf(obj.Labels).IsZero() {
		wstu.SetLabels(obj.Labels)
	} else {
		wstu.ClearLabels()
	}
	if !reflect.ValueOf(obj.Annotations).IsZero() {
		wstu.SetAnnotations(obj.Annotations)
	}
	if !reflect.ValueOf(obj.Status).IsZero() {
		wstu.SetStatus(obj.Status)
	}
	wstu.SetSchema(obj.Schema)

	// With Default.
	if obj.UpdateTime != nil {
		wstu.SetUpdateTime(*obj.UpdateTime)
	}

	// Record the given object.
	wstu.object = obj

	return wstu
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wstu *WorkflowStepTemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkflowStepTemplateUpdate {
	wstu.modifiers = append(wstu.modifiers, modifiers...)
	return wstu
}

func (wstu *WorkflowStepTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(workflowsteptemplate.Table, workflowsteptemplate.Columns, sqlgraph.NewFieldSpec(workflowsteptemplate.FieldID, field.TypeString))
	if ps := wstu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wstu.mutation.Description(); ok {
		_spec.SetField(workflowsteptemplate.FieldDescription, field.TypeString, value)
	}
	if wstu.mutation.DescriptionCleared() {
		_spec.ClearField(workflowsteptemplate.FieldDescription, field.TypeString)
	}
	if value, ok := wstu.mutation.Labels(); ok {
		_spec.SetField(workflowsteptemplate.FieldLabels, field.TypeJSON, value)
	}
	if wstu.mutation.LabelsCleared() {
		_spec.ClearField(workflowsteptemplate.FieldLabels, field.TypeJSON)
	}
	if value, ok := wstu.mutation.Annotations(); ok {
		_spec.SetField(workflowsteptemplate.FieldAnnotations, field.TypeJSON, value)
	}
	if wstu.mutation.AnnotationsCleared() {
		_spec.ClearField(workflowsteptemplate.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := wstu.mutation.UpdateTime(); ok {
		_spec.SetField(workflowsteptemplate.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := wstu.mutation.Status(); ok {
		_spec.SetField(workflowsteptemplate.FieldStatus, field.TypeJSON, value)
	}
	if wstu.mutation.StatusCleared() {
		_spec.ClearField(workflowsteptemplate.FieldStatus, field.TypeJSON)
	}
	if value, ok := wstu.mutation.Schema(); ok {
		_spec.SetField(workflowsteptemplate.FieldSchema, field.TypeOther, value)
	}
	_spec.Node.Schema = wstu.schemaConfig.WorkflowStepTemplate
	ctx = internal.NewSchemaConfigContext(ctx, wstu.schemaConfig)
	_spec.AddModifiers(wstu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wstu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowsteptemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wstu.mutation.done = true
	return n, nil
}

// WorkflowStepTemplateUpdateOne is the builder for updating a single WorkflowStepTemplate entity.
type WorkflowStepTemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WorkflowStepTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
	object    *WorkflowStepTemplate
}

// SetDescription sets the "description" field.
func (wstuo *WorkflowStepTemplateUpdateOne) SetDescription(s string) *WorkflowStepTemplateUpdateOne {
	wstuo.mutation.SetDescription(s)
	return wstuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wstuo *WorkflowStepTemplateUpdateOne) SetNillableDescription(s *string) *WorkflowStepTemplateUpdateOne {
	if s != nil {
		wstuo.SetDescription(*s)
	}
	return wstuo
}

// ClearDescription clears the value of the "description" field.
func (wstuo *WorkflowStepTemplateUpdateOne) ClearDescription() *WorkflowStepTemplateUpdateOne {
	wstuo.mutation.ClearDescription()
	return wstuo
}

// SetLabels sets the "labels" field.
func (wstuo *WorkflowStepTemplateUpdateOne) SetLabels(m map[string]string) *WorkflowStepTemplateUpdateOne {
	wstuo.mutation.SetLabels(m)
	return wstuo
}

// ClearLabels clears the value of the "labels" field.
func (wstuo *WorkflowStepTemplateUpdateOne) ClearLabels() *WorkflowStepTemplateUpdateOne {
	wstuo.mutation.ClearLabels()
	return wstuo
}

// SetAnnotations sets the "annotations" field.
func (wstuo *WorkflowStepTemplateUpdateOne) SetAnnotations(m map[string]string) *WorkflowStepTemplateUpdateOne {
	wstuo.mutation.SetAnnotations(m)
	return wstuo
}

// ClearAnnotations clears the value of the "annotations" field.
func (wstuo *WorkflowStepTemplateUpdateOne) ClearAnnotations() *WorkflowStepTemplateUpdateOne {
	wstuo.mutation.ClearAnnotations()
	return wstuo
}

// SetUpdateTime sets the "update_time" field.
func (wstuo *WorkflowStepTemplateUpdateOne) SetUpdateTime(t time.Time) *WorkflowStepTemplateUpdateOne {
	wstuo.mutation.SetUpdateTime(t)
	return wstuo
}

// SetStatus sets the "status" field.
func (wstuo *WorkflowStepTemplateUpdateOne) SetStatus(s status.Status) *WorkflowStepTemplateUpdateOne {
	wstuo.mutation.SetStatus(s)
	return wstuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wstuo *WorkflowStepTemplateUpdateOne) SetNillableStatus(s *status.Status) *WorkflowStepTemplateUpdateOne {
	if s != nil {
		wstuo.SetStatus(*s)
	}
	return wstuo
}

// ClearStatus clears the value of the "status" field.
func (wstuo *WorkflowStepTemplateUpdateOne) ClearStatus() *WorkflowStepTemplateUpdateOne {
	wstuo.mutation.ClearStatus()
	return wstuo
}

// SetSchema sets the "schema" field.
func (wstuo *WorkflowStepTemplateUpdateOne) SetSchema(pr property.Schemas) *WorkflowStepTemplateUpdateOne {
	wstuo.mutation.SetSchema(pr)
	return wstuo
}

// Mutation returns the WorkflowStepTemplateMutation object of the builder.
func (wstuo *WorkflowStepTemplateUpdateOne) Mutation() *WorkflowStepTemplateMutation {
	return wstuo.mutation
}

// Where appends a list predicates to the WorkflowStepTemplateUpdate builder.
func (wstuo *WorkflowStepTemplateUpdateOne) Where(ps ...predicate.WorkflowStepTemplate) *WorkflowStepTemplateUpdateOne {
	wstuo.mutation.Where(ps...)
	return wstuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wstuo *WorkflowStepTemplateUpdateOne) Select(field string, fields ...string) *WorkflowStepTemplateUpdateOne {
	wstuo.fields = append([]string{field}, fields...)
	return wstuo
}

// Save executes the query and returns the updated WorkflowStepTemplate entity.
func (wstuo *WorkflowStepTemplateUpdateOne) Save(ctx context.Context) (*WorkflowStepTemplate, error) {
	if err := wstuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wstuo.sqlSave, wstuo.mutation, wstuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wstuo *WorkflowStepTemplateUpdateOne) SaveX(ctx context.Context) *WorkflowStepTemplate {
	node, err := wstuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wstuo *WorkflowStepTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := wstuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wstuo *WorkflowStepTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := wstuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wstuo *WorkflowStepTemplateUpdateOne) defaults() error {
	if _, ok := wstuo.mutation.UpdateTime(); !ok {
		if workflowsteptemplate.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("model: uninitialized workflowsteptemplate.UpdateDefaultUpdateTime (forgotten import model/runtime?)")
		}
		v := workflowsteptemplate.UpdateDefaultUpdateTime()
		wstuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// Set is different from other Set* methods,
// it sets the value by judging the definition of each field within the entire object.
//
// For default fields, Set calls if the value changes from the original.
//
// For no default but required fields, Set calls if the value changes from the original.
//
// For no default but optional fields, Set calls if the value changes from the original,
// or clears if changes to zero.
//
// For example:
//
//	## Without Default
//
//	### Required
//
//	db.SetX(obj.X)
//
//	### Optional or Default
//
//	if _is_zero_value_(obj.X) {
//	   if _is_not_equal_(db.X, obj.X) {
//	      db.SetX(obj.X)
//	   }
//	} else {
//	   db.ClearX()
//	}
//
//	## With Default
//
//	if _is_zero_value_(obj.X) && _is_not_equal_(db.X, obj.X) {
//	   db.SetX(obj.X)
//	}
func (wstuo *WorkflowStepTemplateUpdateOne) Set(obj *WorkflowStepTemplate) *WorkflowStepTemplateUpdateOne {
	h := func(n ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			mt := m.(*WorkflowStepTemplateMutation)
			db, err := mt.Client().WorkflowStepTemplate.Get(ctx, *mt.id)
			if err != nil {
				return nil, fmt.Errorf("failed getting WorkflowStepTemplate with id: %v", *mt.id)
			}

			// Without Default.
			if obj.Description != "" {
				if db.Description != obj.Description {
					wstuo.SetDescription(obj.Description)
				}
			} else {
				wstuo.ClearDescription()
			}
			if !reflect.ValueOf(obj.Labels).IsZero() {
				if !reflect.DeepEqual(db.Labels, obj.Labels) {
					wstuo.SetLabels(obj.Labels)
				}
			} else {
				wstuo.ClearLabels()
			}
			if !reflect.ValueOf(obj.Annotations).IsZero() {
				if !reflect.DeepEqual(db.Annotations, obj.Annotations) {
					wstuo.SetAnnotations(obj.Annotations)
				}
			}
			if !reflect.ValueOf(obj.Status).IsZero() {
				if !db.Status.Equal(obj.Status) {
					wstuo.SetStatus(obj.Status)
				}
			}
			if !reflect.DeepEqual(db.Schema, obj.Schema) {
				wstuo.SetSchema(obj.Schema)
			}

			// With Default.
			if (obj.UpdateTime != nil) && (!reflect.DeepEqual(db.UpdateTime, obj.UpdateTime)) {
				wstuo.SetUpdateTime(*obj.UpdateTime)
			}

			// Record the given object.
			wstuo.object = obj

			return n.Mutate(ctx, m)
		})
	}

	wstuo.hooks = append(wstuo.hooks, h)

	return wstuo
}

// getClientSet returns the ClientSet for the given builder.
func (wstuo *WorkflowStepTemplateUpdateOne) getClientSet() (mc ClientSet) {
	if _, ok := wstuo.config.driver.(*txDriver); ok {
		tx := &Tx{config: wstuo.config}
		tx.init()
		mc = tx
	} else {
		cli := &Client{config: wstuo.config}
		cli.init()
		mc = cli
	}
	return mc
}

// SaveE calls the given function after updated the WorkflowStepTemplate entity,
// which is always good for cascading update operations.
func (wstuo *WorkflowStepTemplateUpdateOne) SaveE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStepTemplate) error) (*WorkflowStepTemplate, error) {
	obj, err := wstuo.Save(ctx)
	if err != nil &&
		(wstuo.object == nil || !errors.Is(err, stdsql.ErrNoRows)) {
		return nil, err
	}

	if len(cbs) == 0 {
		return obj, err
	}

	mc := wstuo.getClientSet()

	if obj == nil {
		obj = wstuo.object
	} else if x := wstuo.object; x != nil {
		if _, set := wstuo.mutation.Field(workflowsteptemplate.FieldDescription); set {
			obj.Description = x.Description
		}
		if _, set := wstuo.mutation.Field(workflowsteptemplate.FieldLabels); set {
			obj.Labels = x.Labels
		}
		if _, set := wstuo.mutation.Field(workflowsteptemplate.FieldAnnotations); set {
			obj.Annotations = x.Annotations
		}
		if _, set := wstuo.mutation.Field(workflowsteptemplate.FieldStatus); set {
			obj.Status = x.Status
		}
		if _, set := wstuo.mutation.Field(workflowsteptemplate.FieldSchema); set {
			obj.Schema = x.Schema
		}
	}

	for i := range cbs {
		if err = cbs[i](ctx, mc, obj); err != nil {
			return nil, err
		}
	}

	return obj, nil
}

// SaveEX is like SaveE, but panics if an error occurs.
func (wstuo *WorkflowStepTemplateUpdateOne) SaveEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStepTemplate) error) *WorkflowStepTemplate {
	obj, err := wstuo.SaveE(ctx, cbs...)
	if err != nil {
		panic(err)
	}
	return obj
}

// ExecE calls the given function after executed the query,
// which is always good for cascading update operations.
func (wstuo *WorkflowStepTemplateUpdateOne) ExecE(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStepTemplate) error) error {
	_, err := wstuo.SaveE(ctx, cbs...)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wstuo *WorkflowStepTemplateUpdateOne) ExecEX(ctx context.Context, cbs ...func(ctx context.Context, mc ClientSet, updated *WorkflowStepTemplate) error) {
	if err := wstuo.ExecE(ctx, cbs...); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wstuo *WorkflowStepTemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkflowStepTemplateUpdateOne {
	wstuo.modifiers = append(wstuo.modifiers, modifiers...)
	return wstuo
}

func (wstuo *WorkflowStepTemplateUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowStepTemplate, err error) {
	_spec := sqlgraph.NewUpdateSpec(workflowsteptemplate.Table, workflowsteptemplate.Columns, sqlgraph.NewFieldSpec(workflowsteptemplate.FieldID, field.TypeString))
	id, ok := wstuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "WorkflowStepTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wstuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowsteptemplate.FieldID)
		for _, f := range fields {
			if !workflowsteptemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != workflowsteptemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wstuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wstuo.mutation.Description(); ok {
		_spec.SetField(workflowsteptemplate.FieldDescription, field.TypeString, value)
	}
	if wstuo.mutation.DescriptionCleared() {
		_spec.ClearField(workflowsteptemplate.FieldDescription, field.TypeString)
	}
	if value, ok := wstuo.mutation.Labels(); ok {
		_spec.SetField(workflowsteptemplate.FieldLabels, field.TypeJSON, value)
	}
	if wstuo.mutation.LabelsCleared() {
		_spec.ClearField(workflowsteptemplate.FieldLabels, field.TypeJSON)
	}
	if value, ok := wstuo.mutation.Annotations(); ok {
		_spec.SetField(workflowsteptemplate.FieldAnnotations, field.TypeJSON, value)
	}
	if wstuo.mutation.AnnotationsCleared() {
		_spec.ClearField(workflowsteptemplate.FieldAnnotations, field.TypeJSON)
	}
	if value, ok := wstuo.mutation.UpdateTime(); ok {
		_spec.SetField(workflowsteptemplate.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := wstuo.mutation.Status(); ok {
		_spec.SetField(workflowsteptemplate.FieldStatus, field.TypeJSON, value)
	}
	if wstuo.mutation.StatusCleared() {
		_spec.ClearField(workflowsteptemplate.FieldStatus, field.TypeJSON)
	}
	if value, ok := wstuo.mutation.Schema(); ok {
		_spec.SetField(workflowsteptemplate.FieldSchema, field.TypeOther, value)
	}
	_spec.Node.Schema = wstuo.schemaConfig.WorkflowStepTemplate
	ctx = internal.NewSchemaConfigContext(ctx, wstuo.schemaConfig)
	_spec.AddModifiers(wstuo.modifiers...)
	_node = &WorkflowStepTemplate{config: wstuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wstuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowsteptemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wstuo.mutation.done = true
	return _node, nil
}
