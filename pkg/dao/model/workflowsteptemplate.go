// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"

	"github.com/seal-io/walrus/pkg/dao/model/workflowsteptemplate"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/property"
	"github.com/seal-io/walrus/pkg/dao/types/status"
	"github.com/seal-io/walrus/utils/json"
)

// WorkflowStepTemplate is the model entity for the WorkflowStepTemplate schema.
type WorkflowStepTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID object.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Labels holds the value of the "labels" field.
	Labels map[string]string `json:"labels,omitempty"`
	// Annotations holds the value of the "annotations" field.
	Annotations map[string]string `json:"annotations,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime *time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// Status holds the value of the "status" field.
	Status status.Status `json:"status,omitempty"`
	// Type of the workflow step template.
	Type string `json:"type,omitempty"`
	// Schema of the workflow step template.
	Schema       property.Schemas `json:"schema,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowStepTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflowsteptemplate.FieldLabels, workflowsteptemplate.FieldAnnotations, workflowsteptemplate.FieldStatus:
			values[i] = new([]byte)
		case workflowsteptemplate.FieldID:
			values[i] = new(object.ID)
		case workflowsteptemplate.FieldSchema:
			values[i] = new(property.Schemas)
		case workflowsteptemplate.FieldName, workflowsteptemplate.FieldDescription, workflowsteptemplate.FieldType:
			values[i] = new(sql.NullString)
		case workflowsteptemplate.FieldCreateTime, workflowsteptemplate.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowStepTemplate fields.
func (wst *WorkflowStepTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflowsteptemplate.FieldID:
			if value, ok := values[i].(*object.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wst.ID = *value
			}
		case workflowsteptemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wst.Name = value.String
			}
		case workflowsteptemplate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				wst.Description = value.String
			}
		case workflowsteptemplate.FieldLabels:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field labels", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wst.Labels); err != nil {
					return fmt.Errorf("unmarshal field labels: %w", err)
				}
			}
		case workflowsteptemplate.FieldAnnotations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field annotations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wst.Annotations); err != nil {
					return fmt.Errorf("unmarshal field annotations: %w", err)
				}
			}
		case workflowsteptemplate.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				wst.CreateTime = new(time.Time)
				*wst.CreateTime = value.Time
			}
		case workflowsteptemplate.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				wst.UpdateTime = new(time.Time)
				*wst.UpdateTime = value.Time
			}
		case workflowsteptemplate.FieldStatus:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wst.Status); err != nil {
					return fmt.Errorf("unmarshal field status: %w", err)
				}
			}
		case workflowsteptemplate.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				wst.Type = value.String
			}
		case workflowsteptemplate.FieldSchema:
			if value, ok := values[i].(*property.Schemas); !ok {
				return fmt.Errorf("unexpected type %T for field schema", values[i])
			} else if value != nil {
				wst.Schema = *value
			}
		default:
			wst.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowStepTemplate.
// This includes values selected through modifiers, order, etc.
func (wst *WorkflowStepTemplate) Value(name string) (ent.Value, error) {
	return wst.selectValues.Get(name)
}

// Update returns a builder for updating this WorkflowStepTemplate.
// Note that you need to call WorkflowStepTemplate.Unwrap() before calling this method if this WorkflowStepTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (wst *WorkflowStepTemplate) Update() *WorkflowStepTemplateUpdateOne {
	return NewWorkflowStepTemplateClient(wst.config).UpdateOne(wst)
}

// Unwrap unwraps the WorkflowStepTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wst *WorkflowStepTemplate) Unwrap() *WorkflowStepTemplate {
	_tx, ok := wst.config.driver.(*txDriver)
	if !ok {
		panic("model: WorkflowStepTemplate is not a transactional entity")
	}
	wst.config.driver = _tx.drv
	return wst
}

// String implements the fmt.Stringer.
func (wst *WorkflowStepTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowStepTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wst.ID))
	builder.WriteString("name=")
	builder.WriteString(wst.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(wst.Description)
	builder.WriteString(", ")
	builder.WriteString("labels=")
	builder.WriteString(fmt.Sprintf("%v", wst.Labels))
	builder.WriteString(", ")
	builder.WriteString("annotations=")
	builder.WriteString(fmt.Sprintf("%v", wst.Annotations))
	builder.WriteString(", ")
	if v := wst.CreateTime; v != nil {
		builder.WriteString("create_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := wst.UpdateTime; v != nil {
		builder.WriteString("update_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", wst.Status))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(wst.Type)
	builder.WriteString(", ")
	builder.WriteString("schema=")
	builder.WriteString(fmt.Sprintf("%v", wst.Schema))
	builder.WriteByte(')')
	return builder.String()
}

// WorkflowStepTemplates is a parsable slice of WorkflowStepTemplate.
type WorkflowStepTemplates []*WorkflowStepTemplate
