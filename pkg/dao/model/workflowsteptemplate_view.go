// SPDX-FileCopyrightText: 2023 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus". DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/seal-io/walrus/pkg/dao/model/workflowsteptemplate"
	"github.com/seal-io/walrus/pkg/dao/types/object"
	"github.com/seal-io/walrus/pkg/dao/types/property"
	"github.com/seal-io/walrus/pkg/dao/types/status"
)

// WorkflowStepTemplateCreateInput holds the creation input of the WorkflowStepTemplate entity,
// please tags with `path:",inline" json:",inline"` if embedding.
type WorkflowStepTemplateCreateInput struct {
	inputConfig `path:"-" query:"-" json:"-"`

	// Type of the workflow step template.
	Type string `path:"-" query:"-" json:"type"`
	// Name holds the value of the "name" field.
	Name string `path:"-" query:"-" json:"name"`
	// Description holds the value of the "description" field.
	Description string `path:"-" query:"-" json:"description,omitempty"`
	// Labels holds the value of the "labels" field.
	Labels map[string]string `path:"-" query:"-" json:"labels,omitempty"`
	// Schema of the workflow step template.
	Schema property.Schemas `path:"-" query:"-" json:"schema,omitempty"`
}

// Model returns the WorkflowStepTemplate entity for creating,
// after validating.
func (wstci *WorkflowStepTemplateCreateInput) Model() *WorkflowStepTemplate {
	if wstci == nil {
		return nil
	}

	_wst := &WorkflowStepTemplate{
		Type:        wstci.Type,
		Name:        wstci.Name,
		Description: wstci.Description,
		Labels:      wstci.Labels,
		Schema:      wstci.Schema,
	}

	return _wst
}

// Validate checks the WorkflowStepTemplateCreateInput entity.
func (wstci *WorkflowStepTemplateCreateInput) Validate() error {
	if wstci == nil {
		return errors.New("nil receiver")
	}

	return wstci.ValidateWith(wstci.inputConfig.Context, wstci.inputConfig.Client, nil)
}

// ValidateWith checks the WorkflowStepTemplateCreateInput entity with the given context and client set.
func (wstci *WorkflowStepTemplateCreateInput) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if wstci == nil {
		return errors.New("nil receiver")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	return nil
}

// WorkflowStepTemplateCreateInputs holds the creation input item of the WorkflowStepTemplate entities.
type WorkflowStepTemplateCreateInputsItem struct {
	// Type of the workflow step template.
	Type string `path:"-" query:"-" json:"type"`
	// Name holds the value of the "name" field.
	Name string `path:"-" query:"-" json:"name"`
	// Description holds the value of the "description" field.
	Description string `path:"-" query:"-" json:"description,omitempty"`
	// Labels holds the value of the "labels" field.
	Labels map[string]string `path:"-" query:"-" json:"labels,omitempty"`
	// Schema of the workflow step template.
	Schema property.Schemas `path:"-" query:"-" json:"schema,omitempty"`
}

// ValidateWith checks the WorkflowStepTemplateCreateInputsItem entity with the given context and client set.
func (wstci *WorkflowStepTemplateCreateInputsItem) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if wstci == nil {
		return errors.New("nil receiver")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	return nil
}

// WorkflowStepTemplateCreateInputs holds the creation input of the WorkflowStepTemplate entities,
// please tags with `path:",inline" json:",inline"` if embedding.
type WorkflowStepTemplateCreateInputs struct {
	inputConfig `path:"-" query:"-" json:"-"`

	// Items holds the entities to create, which MUST not be empty.
	Items []*WorkflowStepTemplateCreateInputsItem `path:"-" query:"-" json:"items"`
}

// Model returns the WorkflowStepTemplate entities for creating,
// after validating.
func (wstci *WorkflowStepTemplateCreateInputs) Model() []*WorkflowStepTemplate {
	if wstci == nil || len(wstci.Items) == 0 {
		return nil
	}

	_wsts := make([]*WorkflowStepTemplate, len(wstci.Items))

	for i := range wstci.Items {
		_wst := &WorkflowStepTemplate{
			Type:        wstci.Items[i].Type,
			Name:        wstci.Items[i].Name,
			Description: wstci.Items[i].Description,
			Labels:      wstci.Items[i].Labels,
			Schema:      wstci.Items[i].Schema,
		}

		_wsts[i] = _wst
	}

	return _wsts
}

// Validate checks the WorkflowStepTemplateCreateInputs entity .
func (wstci *WorkflowStepTemplateCreateInputs) Validate() error {
	if wstci == nil {
		return errors.New("nil receiver")
	}

	return wstci.ValidateWith(wstci.inputConfig.Context, wstci.inputConfig.Client, nil)
}

// ValidateWith checks the WorkflowStepTemplateCreateInputs entity with the given context and client set.
func (wstci *WorkflowStepTemplateCreateInputs) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if wstci == nil {
		return errors.New("nil receiver")
	}

	if len(wstci.Items) == 0 {
		return errors.New("empty items")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	for i := range wstci.Items {
		if wstci.Items[i] == nil {
			continue
		}

		if err := wstci.Items[i].ValidateWith(ctx, cs, cache); err != nil {
			return err
		}
	}

	return nil
}

// WorkflowStepTemplateDeleteInput holds the deletion input of the WorkflowStepTemplate entity,
// please tags with `path:",inline"` if embedding.
type WorkflowStepTemplateDeleteInput struct {
	WorkflowStepTemplateQueryInput `path:",inline"`
}

// WorkflowStepTemplateDeleteInputs holds the deletion input item of the WorkflowStepTemplate entities.
type WorkflowStepTemplateDeleteInputsItem struct {
	// ID of the WorkflowStepTemplate entity.
	ID object.ID `path:"-" query:"-" json:"id"`
}

// WorkflowStepTemplateDeleteInputs holds the deletion input of the WorkflowStepTemplate entities,
// please tags with `path:",inline" json:",inline"` if embedding.
type WorkflowStepTemplateDeleteInputs struct {
	inputConfig `path:"-" query:"-" json:"-"`

	// Items holds the entities to create, which MUST not be empty.
	Items []*WorkflowStepTemplateDeleteInputsItem `path:"-" query:"-" json:"items"`
}

// Model returns the WorkflowStepTemplate entities for deleting,
// after validating.
func (wstdi *WorkflowStepTemplateDeleteInputs) Model() []*WorkflowStepTemplate {
	if wstdi == nil || len(wstdi.Items) == 0 {
		return nil
	}

	_wsts := make([]*WorkflowStepTemplate, len(wstdi.Items))
	for i := range wstdi.Items {
		_wsts[i] = &WorkflowStepTemplate{
			ID: wstdi.Items[i].ID,
		}
	}
	return _wsts
}

// IDs returns the ID list of the WorkflowStepTemplate entities for deleting,
// after validating.
func (wstdi *WorkflowStepTemplateDeleteInputs) IDs() []object.ID {
	if wstdi == nil || len(wstdi.Items) == 0 {
		return nil
	}

	ids := make([]object.ID, len(wstdi.Items))
	for i := range wstdi.Items {
		ids[i] = wstdi.Items[i].ID
	}
	return ids
}

// Validate checks the WorkflowStepTemplateDeleteInputs entity.
func (wstdi *WorkflowStepTemplateDeleteInputs) Validate() error {
	if wstdi == nil {
		return errors.New("nil receiver")
	}

	return wstdi.ValidateWith(wstdi.inputConfig.Context, wstdi.inputConfig.Client, nil)
}

// ValidateWith checks the WorkflowStepTemplateDeleteInputs entity with the given context and client set.
func (wstdi *WorkflowStepTemplateDeleteInputs) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if wstdi == nil {
		return errors.New("nil receiver")
	}

	if len(wstdi.Items) == 0 {
		return errors.New("empty items")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	q := cs.WorkflowStepTemplates().Query()

	ids := make([]object.ID, 0, len(wstdi.Items))

	for i := range wstdi.Items {
		if wstdi.Items[i] == nil {
			return errors.New("nil item")
		}

		if wstdi.Items[i].ID != "" {
			ids = append(ids, wstdi.Items[i].ID)
		} else {
			return errors.New("found item hasn't identify")
		}
	}

	if len(ids) != cap(ids) {
		return errors.New("found unrecognized item")
	}

	idsCnt, err := q.Where(workflowsteptemplate.IDIn(ids...)).
		Count(ctx)
	if err != nil {
		return err
	}

	if idsCnt != cap(ids) {
		return errors.New("found unrecognized item")
	}

	return nil
}

// WorkflowStepTemplateQueryInput holds the query input of the WorkflowStepTemplate entity,
// please tags with `path:",inline"` if embedding.
type WorkflowStepTemplateQueryInput struct {
	inputConfig `path:"-" query:"-" json:"-"`

	// Refer holds the route path reference of the WorkflowStepTemplate entity.
	Refer *object.Refer `path:"workflowsteptemplate,default=" query:"-" json:"-"`
	// ID of the WorkflowStepTemplate entity.
	ID object.ID `path:"-" query:"-" json:"id"`
}

// Model returns the WorkflowStepTemplate entity for querying,
// after validating.
func (wstqi *WorkflowStepTemplateQueryInput) Model() *WorkflowStepTemplate {
	if wstqi == nil {
		return nil
	}

	return &WorkflowStepTemplate{
		ID: wstqi.ID,
	}
}

// Validate checks the WorkflowStepTemplateQueryInput entity.
func (wstqi *WorkflowStepTemplateQueryInput) Validate() error {
	if wstqi == nil {
		return errors.New("nil receiver")
	}

	return wstqi.ValidateWith(wstqi.inputConfig.Context, wstqi.inputConfig.Client, nil)
}

// ValidateWith checks the WorkflowStepTemplateQueryInput entity with the given context and client set.
func (wstqi *WorkflowStepTemplateQueryInput) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if wstqi == nil {
		return errors.New("nil receiver")
	}

	if wstqi.Refer != nil && *wstqi.Refer == "" {
		return fmt.Errorf("model: %s : %w", workflowsteptemplate.Label, ErrBlankResourceRefer)
	}

	if cache == nil {
		cache = map[string]any{}
	}

	q := cs.WorkflowStepTemplates().Query()

	if wstqi.Refer != nil {
		if wstqi.Refer.IsID() {
			q.Where(
				workflowsteptemplate.ID(wstqi.Refer.ID()))
		} else {
			return errors.New("invalid identify refer of workflowsteptemplate")
		}
	} else if wstqi.ID != "" {
		q.Where(
			workflowsteptemplate.ID(wstqi.ID))
	} else {
		return errors.New("invalid identify of workflowsteptemplate")
	}

	q.Select(
		workflowsteptemplate.FieldID,
	)

	var e *WorkflowStepTemplate
	{
		// Get cache from previous validation.
		queryStmt, queryArgs := q.sqlQuery(setContextOp(ctx, q.ctx, "cache")).Query()
		ck := fmt.Sprintf("stmt=%v, args=%v", queryStmt, queryArgs)
		if cv, existed := cache[ck]; !existed {
			var err error
			e, err = q.Only(ctx)
			if err != nil {
				return err
			}

			// Set cache for other validation.
			cache[ck] = e
		} else {
			e = cv.(*WorkflowStepTemplate)
		}
	}

	wstqi.ID = e.ID
	return nil
}

// WorkflowStepTemplateQueryInputs holds the query input of the WorkflowStepTemplate entities,
// please tags with `path:",inline" query:",inline"` if embedding.
type WorkflowStepTemplateQueryInputs struct {
	inputConfig `path:"-" query:"-" json:"-"`
}

// Validate checks the WorkflowStepTemplateQueryInputs entity.
func (wstqi *WorkflowStepTemplateQueryInputs) Validate() error {
	if wstqi == nil {
		return errors.New("nil receiver")
	}

	return wstqi.ValidateWith(wstqi.inputConfig.Context, wstqi.inputConfig.Client, nil)
}

// ValidateWith checks the WorkflowStepTemplateQueryInputs entity with the given context and client set.
func (wstqi *WorkflowStepTemplateQueryInputs) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if wstqi == nil {
		return errors.New("nil receiver")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	return nil
}

// WorkflowStepTemplateUpdateInput holds the modification input of the WorkflowStepTemplate entity,
// please tags with `path:",inline" json:",inline"` if embedding.
type WorkflowStepTemplateUpdateInput struct {
	WorkflowStepTemplateQueryInput `path:",inline" query:"-" json:"-"`

	// Description holds the value of the "description" field.
	Description string `path:"-" query:"-" json:"description,omitempty"`
	// Labels holds the value of the "labels" field.
	Labels map[string]string `path:"-" query:"-" json:"labels,omitempty"`
	// Schema of the workflow step template.
	Schema property.Schemas `path:"-" query:"-" json:"schema,omitempty"`
}

// Model returns the WorkflowStepTemplate entity for modifying,
// after validating.
func (wstui *WorkflowStepTemplateUpdateInput) Model() *WorkflowStepTemplate {
	if wstui == nil {
		return nil
	}

	_wst := &WorkflowStepTemplate{
		ID:          wstui.ID,
		Description: wstui.Description,
		Labels:      wstui.Labels,
		Schema:      wstui.Schema,
	}

	return _wst
}

// Validate checks the WorkflowStepTemplateUpdateInput entity.
func (wstui *WorkflowStepTemplateUpdateInput) Validate() error {
	if wstui == nil {
		return errors.New("nil receiver")
	}

	return wstui.ValidateWith(wstui.inputConfig.Context, wstui.inputConfig.Client, nil)
}

// ValidateWith checks the WorkflowStepTemplateUpdateInput entity with the given context and client set.
func (wstui *WorkflowStepTemplateUpdateInput) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if cache == nil {
		cache = map[string]any{}
	}

	if err := wstui.WorkflowStepTemplateQueryInput.ValidateWith(ctx, cs, cache); err != nil {
		return err
	}

	return nil
}

// WorkflowStepTemplateUpdateInputs holds the modification input item of the WorkflowStepTemplate entities.
type WorkflowStepTemplateUpdateInputsItem struct {
	// ID of the WorkflowStepTemplate entity.
	ID object.ID `path:"-" query:"-" json:"id"`

	// Description holds the value of the "description" field.
	Description string `path:"-" query:"-" json:"description,omitempty"`
	// Labels holds the value of the "labels" field.
	Labels map[string]string `path:"-" query:"-" json:"labels,omitempty"`
	// Schema of the workflow step template.
	Schema property.Schemas `path:"-" query:"-" json:"schema"`
}

// ValidateWith checks the WorkflowStepTemplateUpdateInputsItem entity with the given context and client set.
func (wstui *WorkflowStepTemplateUpdateInputsItem) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if wstui == nil {
		return errors.New("nil receiver")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	return nil
}

// WorkflowStepTemplateUpdateInputs holds the modification input of the WorkflowStepTemplate entities,
// please tags with `path:",inline" json:",inline"` if embedding.
type WorkflowStepTemplateUpdateInputs struct {
	inputConfig `path:"-" query:"-" json:"-"`

	// Items holds the entities to create, which MUST not be empty.
	Items []*WorkflowStepTemplateUpdateInputsItem `path:"-" query:"-" json:"items"`
}

// Model returns the WorkflowStepTemplate entities for modifying,
// after validating.
func (wstui *WorkflowStepTemplateUpdateInputs) Model() []*WorkflowStepTemplate {
	if wstui == nil || len(wstui.Items) == 0 {
		return nil
	}

	_wsts := make([]*WorkflowStepTemplate, len(wstui.Items))

	for i := range wstui.Items {
		_wst := &WorkflowStepTemplate{
			ID:          wstui.Items[i].ID,
			Description: wstui.Items[i].Description,
			Labels:      wstui.Items[i].Labels,
			Schema:      wstui.Items[i].Schema,
		}

		_wsts[i] = _wst
	}

	return _wsts
}

// IDs returns the ID list of the WorkflowStepTemplate entities for modifying,
// after validating.
func (wstui *WorkflowStepTemplateUpdateInputs) IDs() []object.ID {
	if wstui == nil || len(wstui.Items) == 0 {
		return nil
	}

	ids := make([]object.ID, len(wstui.Items))
	for i := range wstui.Items {
		ids[i] = wstui.Items[i].ID
	}
	return ids
}

// Validate checks the WorkflowStepTemplateUpdateInputs entity.
func (wstui *WorkflowStepTemplateUpdateInputs) Validate() error {
	if wstui == nil {
		return errors.New("nil receiver")
	}

	return wstui.ValidateWith(wstui.inputConfig.Context, wstui.inputConfig.Client, nil)
}

// ValidateWith checks the WorkflowStepTemplateUpdateInputs entity with the given context and client set.
func (wstui *WorkflowStepTemplateUpdateInputs) ValidateWith(ctx context.Context, cs ClientSet, cache map[string]any) error {
	if wstui == nil {
		return errors.New("nil receiver")
	}

	if len(wstui.Items) == 0 {
		return errors.New("empty items")
	}

	if cache == nil {
		cache = map[string]any{}
	}

	q := cs.WorkflowStepTemplates().Query()

	ids := make([]object.ID, 0, len(wstui.Items))

	for i := range wstui.Items {
		if wstui.Items[i] == nil {
			return errors.New("nil item")
		}

		if wstui.Items[i].ID != "" {
			ids = append(ids, wstui.Items[i].ID)
		} else {
			return errors.New("found item hasn't identify")
		}
	}

	if len(ids) != cap(ids) {
		return errors.New("found unrecognized item")
	}

	idsCnt, err := q.Where(workflowsteptemplate.IDIn(ids...)).
		Count(ctx)
	if err != nil {
		return err
	}

	if idsCnt != cap(ids) {
		return errors.New("found unrecognized item")
	}

	for i := range wstui.Items {
		if err := wstui.Items[i].ValidateWith(ctx, cs, cache); err != nil {
			return err
		}
	}

	return nil
}

// WorkflowStepTemplateOutput holds the output of the WorkflowStepTemplate entity.
type WorkflowStepTemplateOutput struct {
	ID          object.ID         `json:"id,omitempty"`
	Name        string            `json:"name,omitempty"`
	Description string            `json:"description,omitempty"`
	Labels      map[string]string `json:"labels,omitempty"`
	CreateTime  *time.Time        `json:"createTime,omitempty"`
	UpdateTime  *time.Time        `json:"updateTime,omitempty"`
	Status      status.Status     `json:"status,omitempty"`
	Type        string            `json:"type,omitempty"`
	Schema      property.Schemas  `json:"schema,omitempty"`
}

// View returns the output of WorkflowStepTemplate entity.
func (_wst *WorkflowStepTemplate) View() *WorkflowStepTemplateOutput {
	return ExposeWorkflowStepTemplate(_wst)
}

// View returns the output of WorkflowStepTemplate entities.
func (_wsts WorkflowStepTemplates) View() []*WorkflowStepTemplateOutput {
	return ExposeWorkflowStepTemplates(_wsts)
}

// ExposeWorkflowStepTemplate converts the WorkflowStepTemplate to WorkflowStepTemplateOutput.
func ExposeWorkflowStepTemplate(_wst *WorkflowStepTemplate) *WorkflowStepTemplateOutput {
	if _wst == nil {
		return nil
	}

	wsto := &WorkflowStepTemplateOutput{
		ID:          _wst.ID,
		Name:        _wst.Name,
		Description: _wst.Description,
		Labels:      _wst.Labels,
		CreateTime:  _wst.CreateTime,
		UpdateTime:  _wst.UpdateTime,
		Status:      _wst.Status,
		Type:        _wst.Type,
		Schema:      _wst.Schema,
	}

	return wsto
}

// ExposeWorkflowStepTemplates converts the WorkflowStepTemplate slice to WorkflowStepTemplateOutput pointer slice.
func ExposeWorkflowStepTemplates(_wsts []*WorkflowStepTemplate) []*WorkflowStepTemplateOutput {
	if len(_wsts) == 0 {
		return nil
	}

	wstos := make([]*WorkflowStepTemplateOutput, len(_wsts))
	for i := range _wsts {
		wstos[i] = ExposeWorkflowStepTemplate(_wsts[i])
	}
	return wstos
}
