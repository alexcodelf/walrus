// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

// ResourceOperationHookApplyConfiguration represents an declarative configuration of the ResourceOperationHook type for use
// with apply.
type ResourceOperationHookApplyConfiguration struct {
	Pre  []ResourceHookStepApplyConfiguration `json:"pre,omitempty"`
	Post []ResourceHookStepApplyConfiguration `json:"post,omitempty"`
}

// ResourceOperationHookApplyConfiguration constructs an declarative configuration of the ResourceOperationHook type for use with
// apply.
func ResourceOperationHook() *ResourceOperationHookApplyConfiguration {
	return &ResourceOperationHookApplyConfiguration{}
}

// WithPre adds the given value to the Pre field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Pre field.
func (b *ResourceOperationHookApplyConfiguration) WithPre(values ...*ResourceHookStepApplyConfiguration) *ResourceOperationHookApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPre")
		}
		b.Pre = append(b.Pre, *values[i])
	}
	return b
}

// WithPost adds the given value to the Post field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Post field.
func (b *ResourceOperationHookApplyConfiguration) WithPost(values ...*ResourceHookStepApplyConfiguration) *ResourceOperationHookApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPost")
		}
		b.Post = append(b.Post, *values[i])
	}
	return b
}
