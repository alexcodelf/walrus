// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	v1 "github.com/seal-io/walrus/pkg/apis/walruscore/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ResourceRunSpecApplyConfiguration represents an declarative configuration of the ResourceRunSpec type for use
// with apply.
type ResourceRunSpecApplyConfiguration struct {
	Project         *string                                     `json:"project,omitempty"`
	ResourceName    *string                                     `json:"resource,omitempty"`
	Type            *v1.ResourceRunType                         `json:"type,omitempty"`
	Attributes      *runtime.RawExtension                       `json:"attributes,omitempty"`
	TemplateVersion *TempalteVersionReferenceApplyConfiguration `json:"templateVersionReference,omitempty"`
}

// ResourceRunSpecApplyConfiguration constructs an declarative configuration of the ResourceRunSpec type for use with
// apply.
func ResourceRunSpec() *ResourceRunSpecApplyConfiguration {
	return &ResourceRunSpecApplyConfiguration{}
}

// WithProject sets the Project field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Project field is set to the value of the last call.
func (b *ResourceRunSpecApplyConfiguration) WithProject(value string) *ResourceRunSpecApplyConfiguration {
	b.Project = &value
	return b
}

// WithResourceName sets the ResourceName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceName field is set to the value of the last call.
func (b *ResourceRunSpecApplyConfiguration) WithResourceName(value string) *ResourceRunSpecApplyConfiguration {
	b.ResourceName = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ResourceRunSpecApplyConfiguration) WithType(value v1.ResourceRunType) *ResourceRunSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithAttributes sets the Attributes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Attributes field is set to the value of the last call.
func (b *ResourceRunSpecApplyConfiguration) WithAttributes(value runtime.RawExtension) *ResourceRunSpecApplyConfiguration {
	b.Attributes = &value
	return b
}

// WithTemplateVersion sets the TemplateVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TemplateVersion field is set to the value of the last call.
func (b *ResourceRunSpecApplyConfiguration) WithTemplateVersion(value *TempalteVersionReferenceApplyConfiguration) *ResourceRunSpecApplyConfiguration {
	b.TemplateVersion = value
	return b
}
