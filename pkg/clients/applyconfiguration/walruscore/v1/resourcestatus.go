// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ResourceStatusApplyConfiguration represents an declarative configuration of the ResourceStatus type for use
// with apply.
type ResourceStatusApplyConfiguration struct {
	StatusDescriptorApplyConfiguration `json:",inline"`
	Project                            *string                                                    `json:"project,omitempty"`
	ComputedAttributes                 *runtime.RawExtension                                      `json:"computedAttributes,omitempty"`
	Dependencies                       []string                                                   `json:"dependencies,omitempty"`
	ResourceHook                       *ResourceHookReferenceApplyConfiguration                   `json:"resourceHook,omitempty"`
	ResourceDefinition                 *ResourceDefinitionReferenceApplyConfiguration             `json:"resourceDefinition,omitempty"`
	ResourceDefinitionMatchingRule     *ResourceDefinitionMatchingRuleReferenceApplyConfiguration `json:"resourceDefinitionMatchingRule,omitempty"`
	Endpoints                          []string                                                   `json:"endpoints,omitempty"`
}

// ResourceStatusApplyConfiguration constructs an declarative configuration of the ResourceStatus type for use with
// apply.
func ResourceStatus() *ResourceStatusApplyConfiguration {
	return &ResourceStatusApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *ResourceStatusApplyConfiguration) WithPhase(value string) *ResourceStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithPhaseMessage sets the PhaseMessage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PhaseMessage field is set to the value of the last call.
func (b *ResourceStatusApplyConfiguration) WithPhaseMessage(value string) *ResourceStatusApplyConfiguration {
	b.PhaseMessage = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *ResourceStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *ResourceStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithProject sets the Project field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Project field is set to the value of the last call.
func (b *ResourceStatusApplyConfiguration) WithProject(value string) *ResourceStatusApplyConfiguration {
	b.Project = &value
	return b
}

// WithComputedAttributes sets the ComputedAttributes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ComputedAttributes field is set to the value of the last call.
func (b *ResourceStatusApplyConfiguration) WithComputedAttributes(value runtime.RawExtension) *ResourceStatusApplyConfiguration {
	b.ComputedAttributes = &value
	return b
}

// WithDependencies adds the given value to the Dependencies field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Dependencies field.
func (b *ResourceStatusApplyConfiguration) WithDependencies(values ...string) *ResourceStatusApplyConfiguration {
	for i := range values {
		b.Dependencies = append(b.Dependencies, values[i])
	}
	return b
}

// WithResourceHook sets the ResourceHook field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceHook field is set to the value of the last call.
func (b *ResourceStatusApplyConfiguration) WithResourceHook(value *ResourceHookReferenceApplyConfiguration) *ResourceStatusApplyConfiguration {
	b.ResourceHook = value
	return b
}

// WithResourceDefinition sets the ResourceDefinition field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceDefinition field is set to the value of the last call.
func (b *ResourceStatusApplyConfiguration) WithResourceDefinition(value *ResourceDefinitionReferenceApplyConfiguration) *ResourceStatusApplyConfiguration {
	b.ResourceDefinition = value
	return b
}

// WithResourceDefinitionMatchingRule sets the ResourceDefinitionMatchingRule field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceDefinitionMatchingRule field is set to the value of the last call.
func (b *ResourceStatusApplyConfiguration) WithResourceDefinitionMatchingRule(value *ResourceDefinitionMatchingRuleReferenceApplyConfiguration) *ResourceStatusApplyConfiguration {
	b.ResourceDefinitionMatchingRule = value
	return b
}

// WithEndpoints adds the given value to the Endpoints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Endpoints field.
func (b *ResourceStatusApplyConfiguration) WithEndpoints(values ...string) *ResourceStatusApplyConfiguration {
	for i := range values {
		b.Endpoints = append(b.Endpoints, values[i])
	}
	return b
}
