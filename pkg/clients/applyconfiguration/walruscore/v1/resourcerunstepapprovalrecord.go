// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	v1 "github.com/seal-io/walrus/pkg/apis/walruscore/v1"
)

// ResourceRunStepApprovalRecordApplyConfiguration represents an declarative configuration of the ResourceRunStepApprovalRecord type for use
// with apply.
type ResourceRunStepApprovalRecordApplyConfiguration struct {
	Type    *v1.ResourceRunStepTemplateApprovalType               `json:"type,omitempty"`
	Users   []string                                              `json:"users,omitempty"`
	Actions []ResourceRunStepApprovalUserActionApplyConfiguration `json:"actions,omitempty"`
}

// ResourceRunStepApprovalRecordApplyConfiguration constructs an declarative configuration of the ResourceRunStepApprovalRecord type for use with
// apply.
func ResourceRunStepApprovalRecord() *ResourceRunStepApprovalRecordApplyConfiguration {
	return &ResourceRunStepApprovalRecordApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ResourceRunStepApprovalRecordApplyConfiguration) WithType(value v1.ResourceRunStepTemplateApprovalType) *ResourceRunStepApprovalRecordApplyConfiguration {
	b.Type = &value
	return b
}

// WithUsers adds the given value to the Users field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Users field.
func (b *ResourceRunStepApprovalRecordApplyConfiguration) WithUsers(values ...string) *ResourceRunStepApprovalRecordApplyConfiguration {
	for i := range values {
		b.Users = append(b.Users, values[i])
	}
	return b
}

// WithActions adds the given value to the Actions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Actions field.
func (b *ResourceRunStepApprovalRecordApplyConfiguration) WithActions(values ...*ResourceRunStepApprovalUserActionApplyConfiguration) *ResourceRunStepApprovalRecordApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithActions")
		}
		b.Actions = append(b.Actions, *values[i])
	}
	return b
}
