// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	walruscorev1 "github.com/seal-io/walrus/pkg/apis/walruscore/v1"
	corev1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ResourceRunStepApplyConfiguration represents an declarative configuration of the ResourceRunStep type for use
// with apply.
type ResourceRunStepApplyConfiguration struct {
	StatusDescriptorApplyConfiguration `json:",inline"`
	Name                               *string                                             `json:"name,omitempty"`
	Type                               *walruscorev1.ResourceRunStepType                   `json:"type,omitempty"`
	Template                           *ResourceRunStepTemplateReferenceApplyConfiguration `json:"template,omitempty"`
	StartTime                          *metav1.Time                                        `json:"startTime,omitempty"`
	FinishTime                         *metav1.Time                                        `json:"finishTime,omitempty"`
	DurationInSeconds                  *int64                                              `json:"durationInSeconds,omitempty"`
	Container                          *corev1.ContainerApplyConfiguration                 `json:"container,omitempty"`
	ApprovalRecord                     *ResourceRunStepApprovalRecordApplyConfiguration    `json:"approvalRecord,omitempty"`
}

// ResourceRunStepApplyConfiguration constructs an declarative configuration of the ResourceRunStep type for use with
// apply.
func ResourceRunStep() *ResourceRunStepApplyConfiguration {
	return &ResourceRunStepApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *ResourceRunStepApplyConfiguration) WithPhase(value string) *ResourceRunStepApplyConfiguration {
	b.Phase = &value
	return b
}

// WithPhaseMessage sets the PhaseMessage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PhaseMessage field is set to the value of the last call.
func (b *ResourceRunStepApplyConfiguration) WithPhaseMessage(value string) *ResourceRunStepApplyConfiguration {
	b.PhaseMessage = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *ResourceRunStepApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *ResourceRunStepApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ResourceRunStepApplyConfiguration) WithName(value string) *ResourceRunStepApplyConfiguration {
	b.Name = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ResourceRunStepApplyConfiguration) WithType(value walruscorev1.ResourceRunStepType) *ResourceRunStepApplyConfiguration {
	b.Type = &value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *ResourceRunStepApplyConfiguration) WithTemplate(value *ResourceRunStepTemplateReferenceApplyConfiguration) *ResourceRunStepApplyConfiguration {
	b.Template = value
	return b
}

// WithStartTime sets the StartTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartTime field is set to the value of the last call.
func (b *ResourceRunStepApplyConfiguration) WithStartTime(value metav1.Time) *ResourceRunStepApplyConfiguration {
	b.StartTime = &value
	return b
}

// WithFinishTime sets the FinishTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FinishTime field is set to the value of the last call.
func (b *ResourceRunStepApplyConfiguration) WithFinishTime(value metav1.Time) *ResourceRunStepApplyConfiguration {
	b.FinishTime = &value
	return b
}

// WithDurationInSeconds sets the DurationInSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DurationInSeconds field is set to the value of the last call.
func (b *ResourceRunStepApplyConfiguration) WithDurationInSeconds(value int64) *ResourceRunStepApplyConfiguration {
	b.DurationInSeconds = &value
	return b
}

// WithContainer sets the Container field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Container field is set to the value of the last call.
func (b *ResourceRunStepApplyConfiguration) WithContainer(value *corev1.ContainerApplyConfiguration) *ResourceRunStepApplyConfiguration {
	b.Container = value
	return b
}

// WithApprovalRecord sets the ApprovalRecord field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ApprovalRecord field is set to the value of the last call.
func (b *ResourceRunStepApplyConfiguration) WithApprovalRecord(value *ResourceRunStepApprovalRecordApplyConfiguration) *ResourceRunStepApplyConfiguration {
	b.ApprovalRecord = value
	return b
}
