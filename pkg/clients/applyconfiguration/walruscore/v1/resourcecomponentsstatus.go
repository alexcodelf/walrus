// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ResourceComponentsStatusApplyConfiguration represents an declarative configuration of the ResourceComponentsStatus type for use
// with apply.
type ResourceComponentsStatusApplyConfiguration struct {
	StatusDescriptorApplyConfiguration `json:",inline"`
	Project                            *string                                         `json:"project,omitempty"`
	ResourceName                       *string                                         `json:"resource,omitempty"`
	TemplateVersion                    *TempalteVersionReferenceApplyConfiguration     `json:"templateVersionReference,omitempty"`
	ComputedAttributes                 *runtime.RawExtension                           `json:"computedAttributes,omitempty"`
	Components                         []ResourceComponentApplyConfiguration           `json:"components,omitempty"`
	Dependencies                       []ResourceComponentDependencyApplyConfiguration `json:"dependencies,omitempty"`
}

// ResourceComponentsStatusApplyConfiguration constructs an declarative configuration of the ResourceComponentsStatus type for use with
// apply.
func ResourceComponentsStatus() *ResourceComponentsStatusApplyConfiguration {
	return &ResourceComponentsStatusApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *ResourceComponentsStatusApplyConfiguration) WithPhase(value string) *ResourceComponentsStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithPhaseMessage sets the PhaseMessage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PhaseMessage field is set to the value of the last call.
func (b *ResourceComponentsStatusApplyConfiguration) WithPhaseMessage(value string) *ResourceComponentsStatusApplyConfiguration {
	b.PhaseMessage = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *ResourceComponentsStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *ResourceComponentsStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithProject sets the Project field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Project field is set to the value of the last call.
func (b *ResourceComponentsStatusApplyConfiguration) WithProject(value string) *ResourceComponentsStatusApplyConfiguration {
	b.Project = &value
	return b
}

// WithResourceName sets the ResourceName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceName field is set to the value of the last call.
func (b *ResourceComponentsStatusApplyConfiguration) WithResourceName(value string) *ResourceComponentsStatusApplyConfiguration {
	b.ResourceName = &value
	return b
}

// WithTemplateVersion sets the TemplateVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TemplateVersion field is set to the value of the last call.
func (b *ResourceComponentsStatusApplyConfiguration) WithTemplateVersion(value *TempalteVersionReferenceApplyConfiguration) *ResourceComponentsStatusApplyConfiguration {
	b.TemplateVersion = value
	return b
}

// WithComputedAttributes sets the ComputedAttributes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ComputedAttributes field is set to the value of the last call.
func (b *ResourceComponentsStatusApplyConfiguration) WithComputedAttributes(value runtime.RawExtension) *ResourceComponentsStatusApplyConfiguration {
	b.ComputedAttributes = &value
	return b
}

// WithComponents adds the given value to the Components field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Components field.
func (b *ResourceComponentsStatusApplyConfiguration) WithComponents(values ...*ResourceComponentApplyConfiguration) *ResourceComponentsStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithComponents")
		}
		b.Components = append(b.Components, *values[i])
	}
	return b
}

// WithDependencies adds the given value to the Dependencies field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Dependencies field.
func (b *ResourceComponentsStatusApplyConfiguration) WithDependencies(values ...*ResourceComponentDependencyApplyConfiguration) *ResourceComponentsStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDependencies")
		}
		b.Dependencies = append(b.Dependencies, *values[i])
	}
	return b
}
