// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	v1 "github.com/seal-io/walrus/pkg/apis/walruscore/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceHookLister helps list ResourceHooks.
// All objects returned here must be treated as read-only.
type ResourceHookLister interface {
	// List lists all ResourceHooks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ResourceHook, err error)
	// ResourceHooks returns an object that can list and get ResourceHooks.
	ResourceHooks(namespace string) ResourceHookNamespaceLister
	ResourceHookListerExpansion
}

// resourceHookLister implements the ResourceHookLister interface.
type resourceHookLister struct {
	indexer cache.Indexer
}

// NewResourceHookLister returns a new ResourceHookLister.
func NewResourceHookLister(indexer cache.Indexer) ResourceHookLister {
	return &resourceHookLister{indexer: indexer}
}

// List lists all ResourceHooks in the indexer.
func (s *resourceHookLister) List(selector labels.Selector) (ret []*v1.ResourceHook, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ResourceHook))
	})
	return ret, err
}

// ResourceHooks returns an object that can list and get ResourceHooks.
func (s *resourceHookLister) ResourceHooks(namespace string) ResourceHookNamespaceLister {
	return resourceHookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceHookNamespaceLister helps list and get ResourceHooks.
// All objects returned here must be treated as read-only.
type ResourceHookNamespaceLister interface {
	// List lists all ResourceHooks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ResourceHook, err error)
	// Get retrieves the ResourceHook from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ResourceHook, error)
	ResourceHookNamespaceListerExpansion
}

// resourceHookNamespaceLister implements the ResourceHookNamespaceLister
// interface.
type resourceHookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceHooks in the indexer for a given namespace.
func (s resourceHookNamespaceLister) List(selector labels.Selector) (ret []*v1.ResourceHook, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ResourceHook))
	})
	return ret, err
}

// Get retrieves the ResourceHook from the indexer for a given namespace and name.
func (s resourceHookNamespaceLister) Get(name string) (*v1.ResourceHook, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.SchemeResource("resourcehook"), name)
	}
	return obj.(*v1.ResourceHook), nil
}
